{"version":3,"file":"tf-converter.min.js","sources":["../src/data/compiled_api.ts","../src/operations/executors/utils.ts","../src/operations/op_list/arithmetic.ts","../src/operations/op_list/basic_math.ts","../src/operations/op_list/control.ts","../src/operations/op_list/convolution.ts","../src/operations/op_list/creation.ts","../src/operations/op_list/dynamic.ts","../src/operations/op_list/evaluation.ts","../src/operations/op_list/graph.ts","../src/operations/op_list/image.ts","../src/operations/op_list/logical.ts","../src/operations/op_list/matrices.ts","../src/operations/op_list/normalization.ts","../src/operations/op_list/reduction.ts","../src/operations/op_list/slice_join.ts","../src/operations/op_list/spectral.ts","../src/operations/op_list/transformation.ts","../src/operations/operation_mapper.ts","../src/operations/executors/arithmetic_executor.ts","../src/operations/executors/basic_math_executor.ts","../src/executor/tensor_array.ts","../src/operations/executors/convolution_executor.ts","../src/operations/executors/creation_executor.ts","../src/operations/executors/evaluation_executor.ts","../src/operations/executors/graph_executor.ts","../src/operations/executors/image_executor.ts","../src/operations/executors/logical_executor.ts","../src/operations/executors/matrices_executor.ts","../src/operations/executors/normalization_executor.ts","../src/operations/executors/reduction_executor.ts","../src/operations/executors/slice_join_executor.ts","../src/operations/executors/spectral_executor.ts","../src/operations/executors/transformation_executor.ts","../src/operations/operation_executor.ts","../src/operations/executors/control_executor.ts","../src/operations/executors/dynamic_executor.ts","../src/executor/execution_context.ts","../src/executor/graph_executor.ts","../src/executor/graph_model.ts","../src/version.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\n/** Properties of an Any. */\nexport declare interface IAny {\n  /** Any typeUrl */\n  typeUrl?: (string|null);\n\n  /** Any value */\n  value?: (Uint8Array|null);\n}\n\n/** DataType enum. */\nexport enum DataType {\n  DT_INVALID = 0,\n  DT_FLOAT = 1,\n  DT_DOUBLE = 2,\n  DT_INT32 = 3,\n  DT_UINT8 = 4,\n  DT_INT16 = 5,\n  DT_INT8 = 6,\n  DT_STRING = 7,\n  DT_COMPLEX64 = 8,\n  DT_INT64 = 9,\n  DT_BOOL = 10,\n  DT_QINT8 = 11,\n  DT_QUINT8 = 12,\n  DT_QINT32 = 13,\n  DT_BFLOAT16 = 14,\n  DT_FLOAT_REF = 101,\n  DT_DOUBLE_REF = 102,\n  DT_INT32_REF = 103,\n  DT_UINT8_REF = 104,\n  DT_INT16_REF = 105,\n  DT_INT8_REF = 106,\n  DT_STRING_REF = 107,\n  DT_COMPLEX64_REF = 108,\n  DT_INT64_REF = 109,\n  DT_BOOL_REF = 110,\n  DT_QINT8_REF = 111,\n  DT_QUINT8_REF = 112,\n  DT_QINT32_REF = 113,\n  DT_BFLOAT16_REF = 114\n}\n\n/** Properties of a TensorShape. */\nexport declare interface ITensorShape {\n  /** TensorShape dim */\n  dim?: (TensorShape.IDim[]|null);\n\n  /** TensorShape unknownRank */\n  unknownRank?: (boolean|null);\n}\n\nexport namespace TensorShape {\n  /** Properties of a Dim. */\n  export declare interface IDim {\n    /** Dim size */\n    size?: (number|string|null);\n\n    /** Dim name */\n    name?: (string|null);\n  }\n}\n\n/** Properties of a Tensor. */\nexport declare interface ITensor {\n  /** Tensor dtype */\n  dtype?: (DataType|null);\n\n  /** Tensor tensorShape */\n  tensorShape?: (ITensorShape|null);\n\n  /** Tensor versionNumber */\n  versionNumber?: (number|null);\n\n  /** Tensor tensorContent */\n  tensorContent?: (Uint8Array|null);\n\n  /** Tensor floatVal */\n  floatVal?: (number[]|null);\n\n  /** Tensor doubleVal */\n  doubleVal?: (number[]|null);\n\n  /** Tensor intVal */\n  intVal?: (number[]|null);\n\n  /** Tensor stringVal */\n  stringVal?: (Uint8Array[]|null);\n\n  /** Tensor scomplexVal */\n  scomplexVal?: (number[]|null);\n\n  /** Tensor int64Val */\n  int64Val?: ((number | string)[]|null);\n\n  /** Tensor boolVal */\n  boolVal?: (boolean[]|null);\n\n  /** Tensor uint32Val */\n  uint32Val?: (number[]|null);\n\n  /** Tensor uint64Val */\n  uint64Val?: ((number | string)[]|null);\n}\n\n/** Properties of an AttrValue. */\nexport declare interface IAttrValue {\n  /** AttrValue list */\n  list?: (AttrValue.IListValue|null);\n\n  /** AttrValue s */\n  s?: (string|null);\n\n  /** AttrValue i */\n  i?: (number|string|null);\n\n  /** AttrValue f */\n  f?: (number|null);\n\n  /** AttrValue b */\n  b?: (boolean|null);\n\n  /** AttrValue type */\n  type?: (DataType|null);\n\n  /** AttrValue shape */\n  shape?: (ITensorShape|null);\n\n  /** AttrValue tensor */\n  tensor?: (ITensor|null);\n\n  /** AttrValue placeholder */\n  placeholder?: (string|null);\n\n  /** AttrValue func */\n  func?: (INameAttrList|null);\n}\n\nexport namespace AttrValue {\n  /** Properties of a ListValue. */\n  export declare interface IListValue {\n    /** ListValue s */\n    s?: (string[]|null);\n\n    /** ListValue i */\n    i?: ((number | string)[]|null);\n\n    /** ListValue f */\n    f?: (number[]|null);\n\n    /** ListValue b */\n    b?: (boolean[]|null);\n\n    /** ListValue type */\n    type?: (DataType[]|null);\n\n    /** ListValue shape */\n    shape?: (ITensorShape[]|null);\n\n    /** ListValue tensor */\n    tensor?: (ITensor[]|null);\n\n    /** ListValue func */\n    func?: (INameAttrList[]|null);\n  }\n}\n\n/** Properties of a NameAttrList. */\nexport declare interface INameAttrList {\n  /** NameAttrList name */\n  name?: (string|null);\n\n  /** NameAttrList attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a NodeDef. */\nexport declare interface INodeDef {\n  /** NodeDef name */\n  name?: (string|null);\n\n  /** NodeDef op */\n  op?: (string|null);\n\n  /** NodeDef input */\n  input?: (string[]|null);\n\n  /** NodeDef device */\n  device?: (string|null);\n\n  /** NodeDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n}\n\n/** Properties of a VersionDef. */\nexport declare interface IVersionDef {\n  /** VersionDef producer */\n  producer?: (number|null);\n\n  /** VersionDef minConsumer */\n  minConsumer?: (number|null);\n\n  /** VersionDef badConsumers */\n  badConsumers?: (number[]|null);\n}\n\n/** Properties of a GraphDef. */\nexport declare interface IGraphDef {\n  /** GraphDef node */\n  node?: (INodeDef[]|null);\n\n  /** GraphDef versions */\n  versions?: (IVersionDef|null);\n\n  /** GraphDef library */\n  library?: (IFunctionDefLibrary|null);\n}\n\n/** Properties of a CollectionDef. */\nexport declare interface ICollectionDef {\n  /** CollectionDef nodeList */\n  nodeList?: (CollectionDef.INodeList|null);\n\n  /** CollectionDef bytesList */\n  bytesList?: (CollectionDef.IBytesList|null);\n\n  /** CollectionDef int64List */\n  int64List?: (CollectionDef.IInt64List|null);\n\n  /** CollectionDef floatList */\n  floatList?: (CollectionDef.IFloatList|null);\n\n  /** CollectionDef anyList */\n  anyList?: (CollectionDef.IAnyList|null);\n}\n\nexport namespace CollectionDef {\n  /** Properties of a NodeList. */\n  export declare interface INodeList {\n    /** NodeList value */\n    value?: (string[]|null);\n  }\n\n  /** Properties of a BytesList. */\n  export declare interface IBytesList {\n    /** BytesList value */\n    value?: (Uint8Array[]|null);\n  }\n\n  /** Properties of an Int64List. */\n  export declare interface IInt64List {\n    /** Int64List value */\n    value?: ((number | string)[]|null);\n  }\n\n  /** Properties of a FloatList. */\n  export declare interface IFloatList {\n    /** FloatList value */\n    value?: (number[]|null);\n  }\n\n  /** Properties of an AnyList. */\n  export declare interface IAnyList {\n    /** AnyList value */\n    value?: (IAny[]|null);\n  }\n}\n\n/** Properties of a SaverDef. */\nexport declare interface ISaverDef {\n  /** SaverDef filenameTensorName */\n  filenameTensorName?: (string|null);\n\n  /** SaverDef saveTensorName */\n  saveTensorName?: (string|null);\n\n  /** SaverDef restoreOpName */\n  restoreOpName?: (string|null);\n\n  /** SaverDef maxToKeep */\n  maxToKeep?: (number|null);\n\n  /** SaverDef sharded */\n  sharded?: (boolean|null);\n\n  /** SaverDef keepCheckpointEveryNHours */\n  keepCheckpointEveryNHours?: (number|null);\n\n  /** SaverDef version */\n  version?: (SaverDef.CheckpointFormatVersion|null);\n}\n\nexport namespace SaverDef {\n  /** CheckpointFormatVersion enum. */\n  export enum CheckpointFormatVersion {LEGACY = 0, V1 = 1, V2 = 2}\n}\n\n/** Properties of a TensorInfo. */\nexport declare interface ITensorInfo {\n  /** TensorInfo name */\n  name?: (string|null);\n\n  /** TensorInfo cooSparse */\n  cooSparse?: (TensorInfo.ICooSparse|null);\n\n  /** TensorInfo dtype */\n  dtype?: (DataType|null);\n\n  /** TensorInfo tensorShape */\n  tensorShape?: (ITensorShape|null);\n}\n\nexport namespace TensorInfo {\n  /** Properties of a CooSparse. */\n  export declare interface ICooSparse {\n    /** CooSparse valuesTensorName */\n    valuesTensorName?: (string|null);\n\n    /** CooSparse indicesTensorName */\n    indicesTensorName?: (string|null);\n\n    /** CooSparse denseShapeTensorName */\n    denseShapeTensorName?: (string|null);\n  }\n}\n\n/** Properties of a SignatureDef. */\nexport declare interface ISignatureDef {\n  /** SignatureDef inputs */\n  inputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef outputs */\n  outputs?: ({[k: string]: ITensorInfo}|null);\n\n  /** SignatureDef methodName */\n  methodName?: (string|null);\n}\n\n/** Properties of an AssetFileDef. */\nexport declare interface IAssetFileDef {\n  /** AssetFileDef tensorInfo */\n  tensorInfo?: (ITensorInfo|null);\n\n  /** AssetFileDef filename */\n  filename?: (string|null);\n}\n\n/** Properties of an OpDef. */\nexport declare interface IOpDef {\n  /** OpDef name */\n  name?: (string|null);\n\n  /** OpDef inputArg */\n  inputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef outputArg */\n  outputArg?: (OpDef.IArgDef[]|null);\n\n  /** OpDef attr */\n  attr?: (OpDef.IAttrDef[]|null);\n\n  /** OpDef deprecation */\n  deprecation?: (OpDef.IOpDeprecation|null);\n\n  /** OpDef summary */\n  summary?: (string|null);\n\n  /** OpDef description */\n  description?: (string|null);\n\n  /** OpDef isCommutative */\n  isCommutative?: (boolean|null);\n\n  /** OpDef isAggregate */\n  isAggregate?: (boolean|null);\n\n  /** OpDef isStateful */\n  isStateful?: (boolean|null);\n\n  /** OpDef allowsUninitializedInput */\n  allowsUninitializedInput?: (boolean|null);\n}\n\nexport namespace OpDef {\n  /** Properties of an ArgDef. */\n  export declare interface IArgDef {\n    /** ArgDef name */\n    name?: (string|null);\n\n    /** ArgDef description */\n    description?: (string|null);\n\n    /** ArgDef type */\n    type?: (DataType|null);\n\n    /** ArgDef typeAttr */\n    typeAttr?: (string|null);\n\n    /** ArgDef numberAttr */\n    numberAttr?: (string|null);\n\n    /** ArgDef typeListAttr */\n    typeListAttr?: (string|null);\n\n    /** ArgDef isRef */\n    isRef?: (boolean|null);\n  }\n\n  /** Properties of an AttrDef. */\n  export declare interface IAttrDef {\n    /** AttrDef name */\n    name?: (string|null);\n\n    /** AttrDef type */\n    type?: (string|null);\n\n    /** AttrDef defaultValue */\n    defaultValue?: (IAttrValue|null);\n\n    /** AttrDef description */\n    description?: (string|null);\n\n    /** AttrDef hasMinimum */\n    hasMinimum?: (boolean|null);\n\n    /** AttrDef minimum */\n    minimum?: (number|string|null);\n\n    /** AttrDef allowedValues */\n    allowedValues?: (IAttrValue|null);\n  }\n\n  /** Properties of an OpDeprecation. */\n  export declare interface IOpDeprecation {\n    /** OpDeprecation version */\n    version?: (number|null);\n\n    /** OpDeprecation explanation */\n    explanation?: (string|null);\n  }\n}\n\n/** Properties of an OpList. */\nexport declare interface IOpList {\n  /** OpList op */\n  op?: (IOpDef[]|null);\n}\n\n/** Properties of a MetaGraphDef. */\nexport declare interface IMetaGraphDef {\n  /** MetaGraphDef metaInfoDef */\n  metaInfoDef?: (MetaGraphDef.IMetaInfoDef|null);\n\n  /** MetaGraphDef graphDef */\n  graphDef?: (IGraphDef|null);\n\n  /** MetaGraphDef saverDef */\n  saverDef?: (ISaverDef|null);\n\n  /** MetaGraphDef collectionDef */\n  collectionDef?: ({[k: string]: ICollectionDef}|null);\n\n  /** MetaGraphDef signatureDef */\n  signatureDef?: ({[k: string]: ISignatureDef}|null);\n\n  /** MetaGraphDef assetFileDef */\n  assetFileDef?: (IAssetFileDef[]|null);\n}\n\nexport namespace MetaGraphDef {\n  /** Properties of a MetaInfoDef. */\n  export declare interface IMetaInfoDef {\n    /** MetaInfoDef metaGraphVersion */\n    metaGraphVersion?: (string|null);\n\n    /** MetaInfoDef strippedOpList */\n    strippedOpList?: (IOpList|null);\n\n    /** MetaInfoDef anyInfo */\n    anyInfo?: (IAny|null);\n\n    /** MetaInfoDef tags */\n    tags?: (string[]|null);\n\n    /** MetaInfoDef tensorflowVersion */\n    tensorflowVersion?: (string|null);\n\n    /** MetaInfoDef tensorflowGitVersion */\n    tensorflowGitVersion?: (string|null);\n  }\n}\n\n/** Properties of a SavedModel. */\nexport declare interface ISavedModel {\n  /** SavedModel savedModelSchemaVersion */\n  savedModelSchemaVersion?: (number|string|null);\n\n  /** SavedModel metaGraphs */\n  metaGraphs?: (IMetaGraphDef[]|null);\n}\n\n/** Properties of a FunctionDefLibrary. */\nexport declare interface IFunctionDefLibrary {\n  /** FunctionDefLibrary function */\n  'function'?: (IFunctionDef[]|null);\n\n  /** FunctionDefLibrary gradient */\n  gradient?: (IGradientDef[]|null);\n}\n\n/** Properties of a FunctionDef. */\nexport declare interface IFunctionDef {\n  /** FunctionDef signature */\n  signature?: (IOpDef|null);\n\n  /** FunctionDef attr */\n  attr?: ({[k: string]: IAttrValue}|null);\n\n  /** FunctionDef nodeDef */\n  nodeDef?: (INodeDef[]|null);\n\n  /** FunctionDef ret */\n  ret?: ({[k: string]: string}|null);\n}\n\n/** Properties of a GradientDef. */\nexport declare interface IGradientDef {\n  /** GradientDef functionName */\n  functionName?: (string|null);\n\n  /** GradientDef gradientFunc */\n  gradientFunc?: (string|null);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node, ValueType} from '../types';\n\nexport function getParamValue(\n    paramName: string, node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): ValueType {\n  const inputParam = node.inputParams[paramName];\n  if (inputParam && inputParam.inputIndexStart !== undefined) {\n    const start = inputParam.inputIndexStart;\n    const end = inputParam.inputIndexEnd === 0 ?\n        undefined :\n        (inputParam.inputIndexEnd === undefined ? start + 1 :\n                                                  inputParam.inputIndexEnd);\n    if (inputParam.type === 'tensor') {\n      return getTensor(\n          node.inputNames[inputParam.inputIndexStart], tensorMap, context);\n    }\n    if (inputParam.type === 'tensors') {\n      const inputs = node.inputNames.slice(start, end);\n\n      return inputs.map(name => getTensor(name, tensorMap, context));\n    }\n    const data = Array.prototype.slice.call(\n        getTensor(node.inputNames.slice(start)[0], tensorMap, context)\n            .dataSync());\n    return inputParam.type === 'number' ? data[0] : data;\n  }\n  const attrParam = node.attrParams[paramName];\n  return attrParam && attrParam.value;\n}\n\n/**\n * Retrieve the tensor based on input name by extracting the node name and\n * output index information.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensor(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor {\n  const [nodeName, index] = parseNodeName(name);\n  const contextId = context.currentContextIds.find(contextId => {\n    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n  });\n\n  return contextId !== undefined ?\n      tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] :\n      undefined;\n}\n\n/**\n * Retrieve the tensors based on input name for current context.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensorsForCurrentContenxt(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor[] {\n  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\n\n/**\n * Returns the node name and index from the Node input name.\n * @param inputName The input name of the node, in format of\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\n * default to 0.\n */\nexport function getNodeNameAndIndex(\n    inputName: string, context?: ExecutionContext): [string, number] {\n  const [nodeName, index] = parseNodeName(inputName);\n\n  return [\n    getNodeNameWithContextId(nodeName, context && context.currentContextId),\n    index\n  ];\n}\n\nfunction getNodeNameWithContextId(name: string, contextId?: string): string {\n  return !!contextId ? `${name}-${contextId}` : name;\n}\n\nexport function parseNodeName(name: string): [string, number] {\n  const index = name.lastIndexOf(':');\n  if (index === -1) return [name, 0];\n\n  const nodeName = name.substring(0, index);\n  return [nodeName, Number(name.substring(index + 1))];\n}\n\nexport function split(arr: number[], size: number) {\n  const res = [];\n  for (let i = 0; i < arr.length; i += size) {\n    res.push(arr.slice(i, i + size));\n  }\n  return res;\n}\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Add',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'AddN',\n    'category': 'arithmetic',\n    'inputs':\n        [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'BiasAdd',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sub',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'RealDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Div',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorDiv',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mul',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Maximum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Minimum',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Pow',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'SquaredDifference',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Mod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'FloorMod',\n    'category': 'arithmetic',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Abs',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atan2',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ceil',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ClipByValue',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'clip_value_min', 'name': 'clipValueMin', 'type': 'number'},\n      {'tfName': 'clip_value_max', 'name': 'clipValueMax', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Cos',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Cosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Elu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Exp',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Floor',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Neg',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Relu6',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'clipValueMin',\n        'name': 'clipValueMin',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'clipValueMax',\n        'name': 'clipValueMax',\n        'type': 'number',\n        'defaultValue': 6\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Selu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sigmoid',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sin',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Rsqrt',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Square',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tan',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Tanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Sign',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Round',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Expm1',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Log1p',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Reciprocal',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Softplus',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Asinh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Acosh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Atanh',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Erf',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axes', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'keep_dims',\n        'name': 'keepDims',\n        'type': 'bool',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LeakyRelu',\n    'category': 'basic_math',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 0.2\n      },\n      {\n        'tfName': 'T',\n        'name': 'dtype',\n        'type': 'dtype',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'LoopCond',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'pred', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Switch',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'data', 'type': 'tensor'},\n      {'start': 1, 'name': 'pred', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'Merge',\n    'category': 'control',\n    'inputs':\n        [{'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Enter',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'frame_name', 'name': 'frameName', 'type': 'string'},\n      {'tfName': 'is_constant', 'name': 'isConstant', 'type': 'bool'}\n    ]\n  },\n  {\n    'tfOpName': 'Exit',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NextIteration',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'size', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'},\n      {'tfName': 'dynamic_size', 'name': 'dynamicSize', 'type': 'bool'},\n      {'tfName': 'clear_after_read', 'name': 'clearAfterRead', 'type': 'bool'},\n      {\n        'tfName': 'identical_element_shapes',\n        'name': 'identicalElementShapes',\n        'type': 'bool'\n      },\n      {'tfName': 'tensor_array_name', 'name': 'name', 'type': 'string'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayWriteV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayReadV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'index', 'type': 'number'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{\n      'tfName': 'dtype',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  },\n  {\n    'tfOpName': 'TensorArrayGatherV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'element_shape', 'name': 'elementShape', 'type': 'shape'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayScatterV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'indices', 'type': 'number[]'},\n      {'start': 2, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArrayConcatV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}, {\n        'tfName': 'element_shape_except0',\n        'name': 'elementShapeExcept0',\n        'type': 'shape',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'TensorArraySplitV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'tensor', 'type': 'tensor'},\n      {'start': 2, 'name': 'lengths', 'type': 'number[]'},\n      {'start': 3, 'name': 'flowIn', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TensorArraySizeV3',\n    'category': 'control',\n    'inputs': [\n      {'start': 0, 'name': 'tensorArrayId', 'type': 'number'},\n      {'start': 1, 'name': 'flowIn', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'TensorArrayCloseV3',\n    'category': 'control',\n    'inputs': [{'start': 0, 'name': 'tensorArrayId', 'type': 'number'}]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'AvgPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'MaxPool',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      },\n      {'tfName': 'ksize', 'name': 'kernelSize', 'type': 'number[]'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Conv1D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'stride', 'name': 'stride', 'type': 'number'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NWC'\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}, {\n        'tfName': 'dilation',\n        'name': 'dilation',\n        'type': 'number',\n        'defaultValue': 1\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Conv2D',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true},\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'},\n      {'tfName': 'useCudnnOnGpu', 'name': 'useCudnnOnGpu', 'type': 'bool'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Conv2DBackpropInput',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 2, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n      {'start': 0, 'name': 'outputShape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2d',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthwiseConv2dNative',\n    'category': 'convolution',\n    'inputs': [\n      {'start': 0, 'name': 'input', 'type': 'tensor'},\n      {'start': 1, 'name': 'filter', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'strides', 'name': 'strides', 'type': 'number[]'},\n      {'tfName': 'padding', 'name': 'pad', 'type': 'string'}, {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'defaultValue': 'NHWC'\n      },\n      {'tfName': 'dilations', 'name': 'dilations', 'type': 'number[]'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Fill',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n      {'start': 1, 'name': 'value', 'type': 'number'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'LinSpace',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'num', 'type': 'number'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'OneHot',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'depth', 'type': 'number'},\n      {'start': 2, 'name': 'onValue', 'type': 'number', 'defaultValue': 1},\n      {'start': 3, 'name': 'offValue', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [\n      {\n        'tfName': 'axis',\n        'name': 'axis',\n        'type': 'number',\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Ones',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'OnesLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'RandomUniform',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'minval',\n        'name': 'minval',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'maxval',\n        'name': 'maxval',\n        'type': 'number',\n        'defaultValue': 1\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Range',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'start', 'type': 'number'},\n      {'start': 1, 'name': 'stop', 'type': 'number'},\n      {'start': 2, 'name': 'step', 'type': 'number', 'defaultValue': 0},\n    ],\n    'attrs': [{'tfName': 'Tidx', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'TruncatedNormal',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'means',\n        'name': 'mean',\n        'type': 'number',\n        'defaultValue': 0.0\n      },\n      {\n        'tfName': 'stddev',\n        'name': 'stdDev',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {'tfName': 'seed', 'name': 'seed', 'type': 'number'}, {\n        'tfName': 'seed2',\n        'name': 'seed2',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      },\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'},\n      {'tfName': 'T', 'name': 'T', 'type': 'number', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Zeros',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'shape', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  },\n  {\n    'tfOpName': 'ZerosLike',\n    'category': 'creation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{'tfName': 'T', 'name': 'dtype', 'type': 'dtype'}]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'NonMaxSuppressionV2',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'NonMaxSuppressionV3',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 1, 'name': 'scores', 'type': 'tensor'},\n      {'start': 2, 'name': 'maxOutputSize', 'type': 'number'},\n      {'start': 3, 'name': 'iouThreshold', 'type': 'number'},\n      {'start': 4, 'name': 'scoreThreshold', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Where',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ListDiff',\n    'category': 'dynamic',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'y', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [{\n  'tfOpName': 'TopKV2',\n  'category': 'evaluation',\n  'inputs': [\n    {'start': 0, 'name': 'x', 'type': 'tensor'},\n    {'start': 1, 'name': 'k', 'type': 'number'},\n  ],\n  'attrs': [{'tfName': 'sorted', 'name': 'sorted', 'type': 'bool'}]\n}];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'PlaceholderWithDefault',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'default', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'Placeholder',\n    'category': 'graph',\n    'attrs': [\n      {'tfName': 'shape', 'name': 'shape', 'type': 'shape'},\n      {'tfName': 'dtype', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {'tfOpName': 'Const', 'category': 'graph'}, {\n    'tfOpName': 'Identity',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IdentityN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Snapshot',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Rank',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Size',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'Shape',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'ShapeN',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'end': 0, 'name': 'x', 'type': 'tensors'}]\n  },\n  {\n    'tfOpName': 'Print',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'data', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'message', 'name': 'message', 'type': 'string'}, {\n        'tfName': 'first_n',\n        'name': 'firstN',\n        'type': 'number',\n        'notSupported': true\n      },\n      {\n        'tfName': 'summarize',\n        'name': 'summarize',\n        'type': 'number',\n        'defaultValue': 3\n      }\n    ]\n  },\n  {'tfOpName': 'NoOp', 'category': 'graph', 'inputs': []}, {\n    'tfOpName': 'StopGradient',\n    'category': 'graph',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'FakeQuantWithMinMaxVars',\n    'category': 'graph',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'min', 'name': 'min', 'type': 'number'},\n      {'tfName': 'max', 'name': 'max', 'type': 'number'}\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ResizeBilinear',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ResizeNearestNeighbor',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'images', 'type': 'tensor'},\n      {'start': 1, 'name': 'size', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'align_corners', 'name': 'alignCorners', 'type': 'bool'},\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'CropAndResize',\n    'category': 'image',\n    'inputs': [\n      {'start': 0, 'name': 'image', 'type': 'tensor'},\n      {'start': 1, 'name': 'boxes', 'type': 'tensor'},\n      {'start': 2, 'name': 'boxInd', 'type': 'tensor'},\n      {'start': 3, 'name': 'cropSize', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {'tfName': 'method', 'name': 'method', 'type': 'string'}, {\n        'tfName': 'extrapolation_value',\n        'name': 'extrapolationValue',\n        'type': 'number'\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Equal',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'NotEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Greater',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'GreaterEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Less',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LessEqual',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalAnd',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalNot',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'LogicalOr',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Select',\n    'category': 'logical',\n    'inputs': [\n      {'start': 0, 'name': 'condition', 'type': 'tensor'},\n      {'start': 1, 'name': 'a', 'type': 'tensor'},\n      {'start': 2, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'MatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'transpose_a',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'transpose_b',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'BatchMatMul',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'a', 'type': 'tensor'},\n      {'start': 1, 'name': 'b', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'adj_x',\n        'name': 'transposeA',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {\n        'tfName': 'adj_y',\n        'name': 'transposeB',\n        'type': 'bool',\n        'defaultValue': false\n      },\n      {'tfName': 'T', 'name': 'dtype', 'type': 'dtype', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'Transpose',\n    'category': 'matrices',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'perm', 'type': 'number[]'},\n    ],\n    'attrs': [{\n      'tfName': 'T',\n      'name': 'dtype',\n      'type': 'dtype',\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FusedBatchNorm',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'FusedBatchNormV2',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'scale', 'type': 'tensor'},\n      {'start': 2, 'name': 'offset', 'type': 'tensor'},\n      {'start': 3, 'name': 'mean', 'type': 'tensor'},\n      {'start': 4, 'name': 'variance', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'epsilon',\n        'name': 'epsilon',\n        'type': 'number',\n        'defaultValue': 0.001\n      },\n      {\n        'tfName': 'data_format',\n        'name': 'dataFormat',\n        'type': 'string',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'LRN',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'depth_radius',\n        'name': 'radius',\n        'type': 'number',\n        'defaultValue': 5\n      },\n      {'tfName': 'bias', 'name': 'bias', 'type': 'number', 'defaultValue': 1.0},\n      {\n        'tfName': 'alpha',\n        'name': 'alpha',\n        'type': 'number',\n        'defaultValue': 1.0\n      },\n      {\n        'tfName': 'beta',\n        'name': 'beta',\n        'type': 'number',\n        'defaultValue': 0.5\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Softmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'LogSoftmax',\n    'category': 'normalization',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'normalization',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': true,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Max',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Mean',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Min',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Sum',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'All',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'Any',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  },\n  {\n    'tfOpName': 'ArgMax',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'ArgMin',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Prod',\n    'category': 'reduction',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'},\n    ],\n    'attrs': [{'tfName': 'keep_dims', 'name': 'keepDims', 'type': 'bool'}]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'ConcatV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': -1, 'name': 'tensors', 'type': 'tensors'},\n      {'start': -1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Concat',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 1, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n      {'start': 0, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'GatherV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'Gather',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'validate_indices',\n        'name': 'validateIndices',\n        'type': 'bool',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reverse',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'dims', 'type': 'bool', 'notSupported': true}\n    ]\n  },\n  {\n    'tfOpName': 'ReverseV2',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Slice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'size', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'StridedSlice',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'begin', 'type': 'number[]'},\n      {'start': 2, 'name': 'end', 'type': 'number[]'},\n      {'start': 3, 'name': 'strides', 'type': 'number[]'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'begin_mask',\n        'name': 'beginMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'end_mask',\n        'name': 'endMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'new_axis_mask',\n        'name': 'newAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'ellipsis_mask',\n        'name': 'ellipsisMask',\n        'type': 'number',\n        'defaultValue': 0\n      },\n      {\n        'tfName': 'shrink_axis_mask',\n        'name': 'shrinkAxisMask',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Pack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'end': 0, 'name': 'tensors', 'type': 'tensors'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'Unpack',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'tensor', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'axis', 'name': 'axis', 'type': 'number', 'defaultValue': 0}, {\n        'tfName': 'num',\n        'name': 'num',\n        'type': 'number',\n        'defaultValue': 0,\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Tile',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'reps', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Split',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'axis', 'type': 'number', 'defaultValue': 0},\n      {'start': 1, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'num_split',\n      'name': 'numOrSizeSplits',\n      'type': 'number',\n      'defaultValue': 1\n    }]\n  },\n  {\n    'tfOpName': 'SplitV',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'numOrSizeSplits', 'type': 'number[]'},\n      {'start': 2, 'name': 'axis', 'type': 'number', 'defaultValue': 0}\n    ]\n  },\n  {\n    'tfOpName': 'ScatterNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'indices', 'type': 'tensor'},\n      {'start': 1, 'name': 'values', 'type': 'tensor'},\n      {'start': 2, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'GatherNd',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'indices', 'type': 'tensor'}\n    ]\n  },\n  {\n    'tfOpName': 'SparseToDense',\n    'category': 'slice_join',\n    'inputs': [\n      {'start': 0, 'name': 'sparseIndices', 'type': 'tensor'},\n      {'start': 1, 'name': 'outputShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'sparseValues', 'type': 'tensor'},\n      {'start': 3, 'name': 'defaultValue', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'validate_indices',\n      'name': 'validateIndices',\n      'type': 'bool',\n      'defaultValue': false,\n      'notSupported': true\n    }]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'FFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'IFFT',\n    'category': 'spectral',\n    'inputs': [{'start': 0, 'name': 'x', 'type': 'tensor'}]\n  },\n  {\n    'tfOpName': 'RFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  },\n  {\n    'tfOpName': 'IRFFT',\n    'category': 'spectral',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'}, {\n        'start': 1,\n        'name': 'fft_length',\n        'type': 'number',\n        'notSupported': true\n      }\n    ]\n  }\n];\n","import {OpMapper} from '../types';\n\n/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nexport const json: OpMapper[] = [\n  {\n    'tfOpName': 'Cast',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {\n        'tfName': 'SrcT',\n        'name': 'sdtype',\n        'type': 'dtype',\n        'notSupported': true\n      },\n      {'tfName': 'DstT', 'name': 'dtype', 'type': 'dtype'}\n    ]\n  },\n  {\n    'tfOpName': 'ExpandDims',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'axis', 'type': 'number'}\n    ]\n  },\n  {\n    'tfOpName': 'Pad',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'},\n    ],\n    'attrs': [{\n      'tfName': 'constant_value',\n      'name': 'constantValue',\n      'type': 'number',\n      'defaultValue': 0\n    }]\n  },\n  {\n    'tfOpName': 'PadV2',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'padding', 'type': 'number[]'}, {\n        'start': 2,\n        'name': 'constantValue',\n        'type': 'number',\n        'defaultValue': 0\n      }\n    ]\n  },\n  {\n    'tfOpName': 'Reshape',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'shape', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'Squeeze',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [{\n      'tfName': 'axis',\n      'tfDeprecatedName': 'squeeze_dims',\n      'name': 'axis',\n      'type': 'number[]'\n    }]\n  },\n  {\n    'tfOpName': 'SpaceToBatchND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'paddings', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'BatchToSpaceND',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n      {'start': 1, 'name': 'blockShape', 'type': 'number[]'},\n      {'start': 2, 'name': 'crops', 'type': 'number[]'}\n    ]\n  },\n  {\n    'tfOpName': 'DepthToSpace',\n    'category': 'transformation',\n    'inputs': [\n      {'start': 0, 'name': 'x', 'type': 'tensor'},\n    ],\n    'attrs': [\n      {'tfName': 'block_size', 'name': 'blockSize', 'type': 'number'},\n      {'tfName': 'data_format', 'name': 'dataFormat', 'type': 'string'}\n    ]\n  }\n];\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, ENV} from '@tensorflow/tfjs-core';\nimport * as tensorflow from '../data/compiled_api';\nimport {getNodeNameAndIndex} from './executors/utils';\nimport * as arithmetic from './op_list/arithmetic';\nimport * as basicMath from './op_list/basic_math';\nimport * as control from './op_list/control';\nimport * as convolution from './op_list/convolution';\nimport * as creation from './op_list/creation';\nimport * as dynamic from './op_list/dynamic';\nimport * as evaluation from './op_list/evaluation';\nimport * as graph from './op_list/graph';\nimport * as image from './op_list/image';\nimport * as logical from './op_list/logical';\nimport * as matrices from './op_list/matrices';\nimport * as normalization from './op_list/normalization';\nimport * as reduction from './op_list/reduction';\nimport * as sliceJoin from './op_list/slice_join';\nimport * as spectral from './op_list/spectral';\nimport * as transformation from './op_list/transformation';\nimport {Graph, InputParamValue, Node, OpMapper, ParamValue} from './types';\n\nconst CONTROL_FLOW_OPS = ['Switch', 'Merge', 'Enter', 'Exit', 'NextIteration'];\nconst DYNAMIC_SHAPE_OPS =\n    ['NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'Where'];\n\nexport class OperationMapper {\n  private static _instance: OperationMapper;\n\n  private opMappers: {[key: string]: OpMapper};\n\n  // Singleton instance for the mapper\n  public static get Instance() {\n    return this._instance || (this._instance = new this());\n  }\n\n  // Loads the op mapping from the JSON file.\n  private constructor() {\n    const ops = [\n      arithmetic, basicMath, control, convolution, creation, dynamic,\n      evaluation, logical, image, graph, matrices, normalization, reduction,\n      sliceJoin, spectral, transformation\n    ];\n    const mappersJson: OpMapper[] = [].concat.apply([], ops.map(op => op.json));\n\n    this.opMappers = mappersJson.reduce<{[key: string]: OpMapper}>(\n        (map, mapper: OpMapper) => {\n          map[mapper.tfOpName] = mapper;\n          return map;\n        },\n        {});\n  }\n\n  private isControlFlow(node: tensorflow.INodeDef) {\n    return CONTROL_FLOW_OPS.some(op => op === node.op);\n  }\n\n  private isDynamicShape(node: tensorflow.INodeDef) {\n    return DYNAMIC_SHAPE_OPS.some(op => op === node.op);\n  }\n  // Converts the model from Tensorflow GraphDef to local representation for\n  // TensorFlow.js API\n  transformGraph(graph: tensorflow.IGraphDef): Graph {\n    const tfNodes = graph.node;\n    let withControlFlow = false;\n    let withDynamicShape = false;\n    const placeholders: Node[] = [];\n    const weights: Node[] = [];\n    const nodes = tfNodes.reduce<{[key: string]: Node}>((map, node) => {\n      map[node.name] = this.mapNode(node);\n      if (this.isControlFlow(node)) withControlFlow = true;\n      if (this.isDynamicShape(node)) withDynamicShape = true;\n      if (node.op === 'Placeholder') placeholders.push(map[node.name]);\n      if (node.op === 'Const') weights.push(map[node.name]);\n      return map;\n    }, {});\n\n    const inputs: Node[] = [];\n    const outputs: Node[] = [];\n    Object.keys(nodes).forEach(key => {\n      const node = nodes[key];\n      node.inputNames.forEach(name => {\n        const [nodeName, ] = getNodeNameAndIndex(name);\n        node.inputs.push(nodes[nodeName]);\n        nodes[nodeName].children.push(node);\n      });\n      if (node.inputs.length === 0) inputs.push(node);\n    });\n\n    Object.keys(nodes).forEach(key => {\n      const node = nodes[key];\n      if (node.children.length === 0) outputs.push(node);\n    });\n\n    return {\n      nodes,\n      inputs,\n      outputs,\n      weights,\n      placeholders,\n      withControlFlow,\n      withDynamicShape\n    };\n  }\n\n  private mapNode(node: tensorflow.INodeDef): Node {\n    const mapper = this.opMappers[node.op];\n    if (mapper === undefined) {\n      throw new Error('Tensorflow Op is not supported: ' + node.op);\n    }\n    const newNode: Node = {\n      name: node.name,\n      op: node.op,\n      category: mapper.category,\n      inputNames:\n          (node.input ||\n           []).map(input => input.startsWith('^') ? input.substr(1) : input),\n      inputs: [],\n      children: [],\n      inputParams: {},\n      attrParams: {}\n    };\n    if (node.attr == null) {\n      node.attr = {};\n    }\n\n    if (mapper.inputs != null) {\n      newNode.inputParams =\n          mapper.inputs.reduce<{[key: string]: InputParamValue}>(\n              (map, param) => {\n                map[param.name] = {\n                  type: param.type,\n                  inputIndexStart: param.start,\n                  inputIndexEnd: param.end\n                };\n                return map;\n              },\n              {});\n    }\n    if (mapper.attrs != null) {\n      newNode.attrParams =\n          mapper.attrs.reduce<{[key: string]: ParamValue}>((map, param) => {\n            const type = param.type;\n            let value = undefined;\n            switch (param.type) {\n              case 'string':\n                value = this.getStringParam(\n                    node.attr, param.tfName, param.defaultValue as string);\n\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = this.getStringParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as string);\n                }\n                break;\n              case 'number':\n                value = this.getNumberParam(\n                    node.attr, param.tfName,\n                    (param.defaultValue || 0) as number);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = this.getNumberParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number);\n                }\n                break;\n              case 'number[]':\n                value = this.getNumericArrayParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = this.getNumericArrayParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'bool':\n                value = this.getBoolParam(\n                    node.attr, param.tfName, param.defaultValue as boolean);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = this.getBoolParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as boolean);\n                }\n                break;\n              case 'shape':\n                value = this.getTensorShapeParam(\n                    node.attr, param.tfName, param.defaultValue as number[]);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = this.getTensorShapeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as number[]);\n                }\n                break;\n              case 'dtype':\n                value = this.getDtypeParam(\n                    node.attr, param.tfName, param.defaultValue as DataType);\n                if (value === undefined && !!param.tfDeprecatedName) {\n                  value = this.getDtypeParam(\n                      node.attr, param.tfDeprecatedName,\n                      param.defaultValue as DataType);\n                }\n                break;\n              case 'tensor':\n              case 'tensors':\n                break;\n              default:\n                throw new Error(\n                    `Unsupported param type: ${param.type} for op: ${node.op}`);\n            }\n            map[param.name] = {value, type};\n            return map;\n          }, {});\n    }\n    return newNode;\n  }\n\n  private decodeBase64(text: string): string {\n    // tslint:disable-next-line:no-any\n    const global = ENV.global as any;\n    if (typeof global.atob !== 'undefined') {\n      return global.atob(text);\n    } else if (typeof Buffer !== 'undefined') {\n      return new Buffer(text, 'base64').toString();\n    } else {\n      throw new Error(\n          'Unable to decode base64 in this environment. ' +\n          'Missing built-in atob() or Buffer()');\n    }\n  }\n\n  private getStringParam(\n      attrs: {[key: string]: tensorflow.IAttrValue}, name: string, def: string,\n      keepCase = false): string {\n    const param = attrs[name];\n    if (param !== undefined) {\n      const value = Array.isArray(param.s) ?\n          String.fromCharCode.apply(null, param.s) :\n          this.decodeBase64(param.s);\n      return keepCase ? value : value.toLowerCase();\n    }\n    return def;\n  }\n\n  private getBoolParam(\n      attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n      def: boolean): boolean {\n    const param = attrs[name];\n    return param ? param.b : def;\n  }\n\n  private getNumberParam(\n      attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n      def: number): number {\n    const param = attrs[name] || {};\n    const value = param['i'] ? param['i'] : (param['f'] ? param['f'] : def);\n    return (typeof value === 'number') ?\n        value :\n        parseInt(value as string, 10) as number;\n  }\n  private getDtypeParam(\n      attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n      def: DataType): DataType {\n    const param = attrs[name];\n    if (param && param.type) {\n      // tslint:disable-next-line:no-any\n      let type: any = param.type;\n      if (typeof (param.type) === 'string') {\n        type = tensorflow.DataType[param.type];\n      }\n      switch (type) {\n        case tensorflow.DataType.DT_FLOAT:\n          return 'float32';\n        case tensorflow.DataType.DT_INT32:\n          return 'int32';\n        case tensorflow.DataType.DT_BOOL:\n          return 'bool';\n        default:\n          return def;\n      }\n    }\n    return def;\n  }\n  private getTensorShapeParam(\n      attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n      def?: number[]): number[]|undefined {\n    const param = attrs[name];\n    if (param && param.shape) {\n      if (param.shape.unknownRank) {\n        return undefined;\n      }\n      if (param.shape.dim != null) {\n        return param.shape.dim.map(\n            dim => (typeof dim.size === 'number') ?\n                dim.size :\n                parseInt(dim.size as string, 10));\n      }\n    }\n    return def;\n  }\n\n  private getNumericArrayParam(\n      attrs: {[key: string]: tensorflow.IAttrValue}, name: string,\n      def: number[]): number[] {\n    const param = attrs[name];\n    if (param) {\n      return ((param.list.f && param.list.f.length ? param.list.f :\n                                                     param.list.i))\n                 .map(\n                     v => (typeof v === 'number') ?\n                         v :\n                         parseInt(v as string, 10)) as number[];\n    }\n    return def;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node, OpExecutor} from '../types';\nimport {getParamValue} from './utils';\n\nexport let executeOp: OpExecutor = (node: Node, tensorMap: NamedTensorsMap,\n                                    context: ExecutionContext):\n                                       tfc.Tensor[] => {\n  switch (node.op) {\n    case 'BiasAdd':\n    case 'Add': {\n      return [tfc.add(\n          (getParamValue('a', node, tensorMap, context) as tfc.Tensor),\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'AddN': {\n      return [tfc.addN((\n          getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[]))];\n    }\n    case 'FloorMod':\n    case 'Mod':\n      return [tfc.mod(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    case 'Mul':\n      return [tfc.mul(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    case 'RealDiv':\n    case 'Div': {\n      return [tfc.div(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'FloorDiv': {\n      return [tfc.floorDiv(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sub': {\n      return [tfc.sub(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Minimum': {\n      return [tfc.minimum(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Maximum': {\n      return [tfc.maximum(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Pow': {\n      return [tfc.pow(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'SquaredDifference': {\n      return [tfc.squaredDifference(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'arithmetic';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node, OpExecutor} from '../types';\nimport {getParamValue, getTensor} from './utils';\n\nexport let executeOp: OpExecutor = (node: Node, tensorMap: NamedTensorsMap,\n                                    context: ExecutionContext):\n                                       tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Abs':\n      return [tfc.abs(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Acos':\n      return [tfc.acos(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Acosh':\n      return [tfc.acosh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Asin':\n      return [tfc.asin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Asinh':\n      return [tfc.asinh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atan':\n      return [tfc.atan(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atan2':\n      return [tfc.atan2(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('y', node, tensorMap, context) as tfc.Tensor)];\n    case 'Atanh':\n      return [tfc.atanh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Ceil':\n      return [tfc.ceil(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Cos':\n      return [tfc.cos(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Cosh':\n      return [tfc.cosh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Elu':\n      return [tfc.elu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Erf':\n      return [tfc.erf(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Exp':\n      return [tfc.exp(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Expm1': {\n      return [tfc.expm1(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Floor':\n      return [tfc.floor(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Log':\n      return [tfc.log(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Log1p': {\n      return [tfc.log1p(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Neg':\n      return [tfc.neg(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Reciprocal': {\n      return [tfc.reciprocal(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Relu':\n      return [tfc.relu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Round': {\n      return [tfc.round(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Selu':\n      return [tfc.selu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sigmoid':\n      return [tfc.sigmoid(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sin':\n      return [tfc.sin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Sign': {\n      return [tfc.sign(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sinh': {\n      return [tfc.sinh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Softplus': {\n      return [tfc.softplus(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Sqrt': {\n      return [tfc.sqrt(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Square': {\n      return [tfc.square(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Tanh': {\n      return [tfc.tanh(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Tan':\n      return [tfc.tan(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    case 'Relu6':\n    case 'ClipByValue':\n      return [tfc.clipByValue(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('clipValueMin', node, tensorMap, context) as number,\n          getParamValue('clipValueMax', node, tensorMap, context) as number)];\n    case 'Rsqrt':\n      return [tfc.rsqrt(getTensor(node.inputNames[0], tensorMap, context))];\n    case 'Prod':\n      return [tfc.prod(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('axes', node, tensorMap, context) as number[])];\n    case 'LeakyRelu':\n      return [tfc.leakyRelu(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('alpha', node, tensorMap, context) as number)];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'basic_math';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line:max-line-length\nimport {concat, DataType, slice, stack, Tensor, tensor, tidy, unstack, util} from '@tensorflow/tfjs-core';\n\nexport interface TensorWithState {\n  tensor?: Tensor;\n  written?: boolean;\n  read?: boolean;\n  cleared?: boolean;\n}\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n  private static nextId = 0;\n  private tensors: TensorWithState[] = [];\n  private closed_ = false;\n  readonly id: number;\n  constructor(\n      public readonly name: string, public readonly dtype: DataType,\n      private maxSize: number, private elementShape: number[],\n      public readonly identicalElementShapes: boolean,\n      public readonly dynamicSize: boolean,\n      public readonly clearAfterRead: boolean) {\n    this.id = TensorArray.nextId++;\n  }\n\n  get closed() {\n    return this.closed_;\n  }\n\n  /**\n   * Close the current TensorArray.\n   */\n  clearAndClose() {\n    this.tensors.forEach(tensor => tensor.tensor.dispose());\n    this.tensors = [];\n    this.closed_ = true;\n  }\n\n  size(): number {\n    return this.tensors.length;\n  }\n\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n  read(index: number): Tensor {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || index >= this.tensors.length) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${\n          this.tensors.length}`);\n    }\n\n    const tensorWithState = this.tensors[index];\n    if (tensorWithState.cleared) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not read index ${\n              index} twice because it was cleared after a previous read ` +\n          `(perhaps try setting clear_after_read = false?).`);\n    }\n\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n  readMany(indices: number[]): Tensor[] {\n    return indices.map(index => this.read(index));\n  }\n\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n  write(index: number, tensor: Tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${\n          index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n\n    const t = this.tensors[index] || {};\n\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${\n          this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${\n          tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    }\n\n    // Set the shape for the first time write to unknow shape tensor array\n    if (this.size() === 0 &&\n        (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n\n    this.assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape,\n        `TensorArray ${this.name}: Could not write to TensorArray index ${\n            index}.`);\n\n    if (t && t.read) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been read.`);\n    }\n\n    if (t && t.written) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been written.`);\n    }\n\n    t.tensor = tensor;\n    t.written = true;\n\n    this.tensors[index] = t;\n  }\n\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n  writeMany(indices: number[], tensors: Tensor[]) {\n    if (indices.length !== tensors.length) {\n      throw new Error(\n          `TensorArray ${this.name}: could not write multiple tensors,` +\n          `because the index size: ${\n              indices.length} is not the same as tensors size: ${\n              tensors.length}.`);\n    }\n\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n  gather(indices?: number[], dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but gather requested dtype ${dtype}`);\n    }\n\n    if (!indices) {\n      indices = [];\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    }\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n    const tensors = this.readMany(indices);\n\n    this.assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n\n    return stack(tensors, 0);\n  }\n\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n  concat(dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but concat requested dtype ${dtype}`);\n    }\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    const indices = [];\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    }\n    // Collect all the tensors from the tensors array.\n    const tensors = this.readMany(indices);\n\n    this.assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape,\n        `TensorArray shape mismatch: tensor array shape (${\n            this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n\n    return concat(tensors, 0);\n  }\n\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices nummber[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n  scatter(indices: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n          indices.length} vs. ${tensor.shape[0]}`);\n    }\n\n    const maxIndex = Math.max(...indices);\n\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(\n          `Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n  split(length: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(\n          `TensorArray's size is not equal to the size of lengths (${\n              this.maxSize} vs. ${length.length}), ` +\n          'and the TensorArray is not marked as dynamically resizeable');\n    }\n\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors: Tensor[] = [];\n    tidy(() => {\n      tensor = tensor.reshape([1, totalLength, elementPerRow]);\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = slice(tensor, indices, sizes).reshape(this.elementShape);\n      }\n      return tensors;\n    });\n    const indices = [];\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n    this.writeMany(indices, tensors);\n  }\n\n  /**\n   * This differs from util.assertShapesMatch in that it allows values of\n   * negative one, an undefined size of a dimensinon, in a shape to match\n   * anything.\n   */\n  private assertShapesMatchAllowUndefinedSize(\n      shapeA: number[], shapeB: number[], errorMessagePrefix = ''): void {\n    util.assert(\n        this.shapesEqualAllowUndefinedSize(shapeA, shapeB),\n        () =>\n            errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  }\n\n  private shapesEqualAllowUndefinedSize(n1: number[], n2: number[]) {\n    if (n1.length !== n2.length) {\n      return false;\n    }\n    for (let i = 0; i < n1.length; i++) {\n      if (n1[i] !== -1 && n2[i] !== -1 && n1[i] !== n2[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node, OpExecutor} from '../types';\nimport {getParamValue} from './utils';\n\nexport let executeOp: OpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): tfc.Tensor[] => {\n      switch (node.op) {\n        case 'Conv1D': {\n          const stride =\n              getParamValue('stride', node, tensorMap, context) as number;\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilation =\n              getParamValue('dilation', node, tensorMap, context) as number;\n          return [tfc.conv1d(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D,\n              getParamValue('filter', node, tensorMap, context) as tfc.Tensor3D,\n              stride, pad as 'valid' | 'same', dataFormat as 'NWC' | 'NCW',\n              dilation)];\n        }\n        case 'Conv2D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [tfc.conv2d(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[0], dilations[1]])];\n        }\n        case 'Conv2DBackpropInput':\n        case 'Conv2dTranspose': {\n          const shape = getParamValue(\n                            'outputShape', node, tensorMap,\n                            context) as [number, number, number] |\n              [number, number, number, number];\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          return [tfc.conv2dTranspose(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n              shape, [stride[1], stride[2]], pad as 'valid' | 'same')];\n        }\n        case 'DepthwiseConv2dNative':\n        case 'DepthwiseConv2d': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n\n          return [tfc.depthwiseConv2d(\n              getParamValue('input', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as tfc.Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[0], dilations[1]])];\n        }\n\n        case 'AvgPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfc.avgPool(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n\n        case 'MaxPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfc.maxPool(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n                  tfc.Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'convolution';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node, OpExecutor} from '../types';\nimport {getParamValue} from './utils';\n\nexport let executeOp: OpExecutor = (node: Node, tensorMap: NamedTensorsMap,\n                                    context: ExecutionContext):\n                                       tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Fill': {\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const value = getParamValue('value', node, tensorMap, context) as number;\n      return [tfc.fill(shape, value, dtype)];\n    }\n    case 'LinSpace': {\n      const start = getParamValue('start', node, tensorMap, context) as number;\n      const stop = getParamValue('stop', node, tensorMap, context) as number;\n      const num = getParamValue('num', node, tensorMap, context) as number;\n      return [tfc.linspace(start, stop, num)];\n    }\n    case 'OneHot': {\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor1D;\n      const depth = getParamValue('depth', node, tensorMap, context) as number;\n      const onValue =\n          getParamValue('onValue', node, tensorMap, context) as number;\n      const offValue =\n          getParamValue('offValue', node, tensorMap, context) as number;\n      return [tfc.oneHot(indices, depth, onValue, offValue)];\n    }\n    case 'Ones': {\n      return [tfc.ones(\n          getParamValue('shape', node, tensorMap, context) as number[],\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'OnesLike': {\n      return [tfc.onesLike(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'RandomUniform': {\n      return [tfc.randomUniform(\n          // tslint:disable-next-line:no-any\n          getParamValue('shape', node, tensorMap, context) as any,\n          getParamValue('minval', node, tensorMap, context) as number,\n          getParamValue('maxval', node, tensorMap, context) as number,\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'Range': {\n      const start = getParamValue('start', node, tensorMap, context) as number;\n      const stop = getParamValue('stop', node, tensorMap, context) as number;\n      const step = getParamValue('step', node, tensorMap, context) as number;\n      return [tfc.range(\n          start, stop, step,\n          getParamValue('dtype', node, tensorMap, context) as 'float32' |\n              'int32')];\n    }\n    case 'TruncatedNormal': {\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      const mean = getParamValue('mean', node, tensorMap, context) as number;\n      const stdDev =\n          getParamValue('stdDev', node, tensorMap, context) as number;\n      const seed = getParamValue('seed', node, tensorMap, context) as number;\n      return [tfc.truncatedNormal(\n          shape, mean, stdDev,\n          getParamValue('dtype', node, tensorMap, context) as 'float32' |\n              'int32',\n          seed)];\n    }\n    case 'Zeros': {\n      return [tfc.zeros(\n          getParamValue('shape', node, tensorMap, context) as number[],\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType)];\n    }\n    case 'ZerosLike': {\n      return [tfc.zerosLike(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'creation';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node, OpExecutor} from '../types';\nimport {getParamValue} from './utils';\n\nexport let executeOp: OpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): tfc.Tensor[] => {\n      switch (node.op) {\n        case 'TopKV2': {\n          const x = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n          const k = getParamValue('k', node, tensorMap, context) as number;\n          const sorted =\n              getParamValue('sorted', node, tensorMap, context) as boolean;\n          const result = tfc.topk(x, k, sorted);\n          return [result.values, result.indices];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'evaluation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node, OpExecutor} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport let executeOp: OpExecutor = (node: Node, tensorMap: NamedTensorsMap,\n                                    context: ExecutionContext):\n                                       tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Const': {\n      return tensorMap[node.name];\n    }\n    case 'PlaceholderWithDefault':\n      const def =\n          getParamValue('default', node, tensorMap, context) as tfc.Tensor;\n      return [getTensor(node.name, tensorMap, context) || def];\n    case 'Placeholder':\n      return [getTensor(node.name, tensorMap, context)];\n    case 'Identity':\n    case 'StopGradient':\n    case 'FakeQuantWithMinMaxVars':  // This op is currently ignored.\n      return [\n        (getParamValue('x', node, tensorMap, context) as tfc.Tensor).clone()\n      ];\n    case 'IdentityN':\n      return (getParamValue('x', node, tensorMap, context) as tfc.Tensor[])\n          .map((t: tfc.Tensor) => t.clone());\n    case 'Snapshot':\n      const snapshot =\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor);\n      return [snapshot.clone()];\n    case 'Shape':\n      return [tfc.tensor1d(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).shape,\n          'int32')];\n    case 'ShapeN':\n      return (getParamValue('x', node, tensorMap, context) as tfc.Tensor[])\n          .map((t: tfc.Tensor) => tfc.tensor1d(t.shape));\n    case 'Size':\n      return [tfc.scalar(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).size,\n          'int32')];\n    case 'Rank':\n      return [tfc.scalar(\n          (getParamValue('x', node, tensorMap, context) as tfc.Tensor).rank,\n          'int32')];\n    case 'NoOp':\n      return [];\n    case 'Print':\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const data =\n          getParamValue('data', node, tensorMap, context) as tfc.Tensor[];\n      const message =\n          getParamValue('message', node, tensorMap, context) as string;\n      const summarize =\n          getParamValue('summarize', node, tensorMap, context) as number;\n      console.warn(\n          'The graph has a tf.print() operation,' +\n          'usually used for debugging, which slows down performance.');\n      console.log(message);\n      for (let i = 0; i < data.length; i++) {\n        console.log(\n            Array.prototype.slice.call(data[i].dataSync()).slice(0, summarize));\n      }\n      return [input];\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'graph';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node, OpExecutor} from '../types';\nimport {getParamValue} from './utils';\n\nexport let executeOp: OpExecutor = (node: Node, tensorMap: NamedTensorsMap,\n                                    context: ExecutionContext):\n                                       tfc.Tensor[] => {\n  switch (node.op) {\n    case 'ResizeBilinear': {\n      const images =\n          getParamValue('images', node, tensorMap, context) as tfc.Tensor;\n      const size = getParamValue('size', node, tensorMap, context) as number[];\n      const alignCorners =\n          getParamValue('alignCorners', node, tensorMap, context) as boolean;\n      return [tfc.image.resizeBilinear(\n          images as tfc.Tensor3D | tfc.Tensor4D, [size[0], size[1]],\n          alignCorners)];\n    }\n    case 'ResizeNearestNeighbor': {\n      const images =\n          getParamValue('images', node, tensorMap, context) as tfc.Tensor;\n      const size = getParamValue('size', node, tensorMap, context) as number[];\n      const alignCorners =\n          getParamValue('alignCorners', node, tensorMap, context) as boolean;\n      return [tfc.image.resizeNearestNeighbor(\n          images as tfc.Tensor3D | tfc.Tensor4D, [size[0], size[1]],\n          alignCorners)];\n    }\n    case 'CropAndResize': {\n      const image =\n          getParamValue('image', node, tensorMap, context) as tfc.Tensor;\n      const boxes =\n          getParamValue('boxes', node, tensorMap, context) as tfc.Tensor;\n      const boxInd =\n          getParamValue('boxInd', node, tensorMap, context) as tfc.Tensor;\n      const cropSize =\n          getParamValue('cropSize', node, tensorMap, context) as number[];\n      const method =\n          getParamValue('method', node, tensorMap, context) as string;\n      const extrapolationValue =\n          getParamValue('extrapolationValue', node, tensorMap, context) as\n          number;\n      return [tfc.image.cropAndResize(\n          image as tfc.Tensor4D, boxes as tfc.Tensor2D, boxInd as tfc.Tensor1D,\n          cropSize as [number, number], method as 'bilinear' | 'nearest',\n          extrapolationValue)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'image';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node, OpExecutor} from '../types';\nimport {getParamValue} from './utils';\n\nexport let executeOp: OpExecutor = (node: Node, tensorMap: NamedTensorsMap,\n                                    context: ExecutionContext):\n                                       tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Equal': {\n      return [tfc.equal(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'NotEqual': {\n      return [tfc.notEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Greater': {\n      return [tfc.greater(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'GreaterEqual': {\n      return [tfc.greaterEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Less': {\n      return [tfc.less(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LessEqual': {\n      return [tfc.lessEqual(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalAnd': {\n      return [tfc.logicalAnd(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalNot': {\n      return [tfc.logicalNot(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogicalOr': {\n      return [tfc.logicalOr(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'Select': {\n      return [tfc.where(\n          getParamValue('condition', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'logical';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node, OpExecutor} from '../types';\nimport {getParamValue} from './utils';\n\nexport let executeOp: OpExecutor = (node: Node, tensorMap: NamedTensorsMap,\n                                    context: ExecutionContext):\n                                       tfc.Tensor[] => {\n  switch (node.op) {\n    case 'BatchMatMul':\n    case 'MatMul':\n      return [tfc.matMul(\n          getParamValue('a', node, tensorMap, context) as tfc.Tensor2D,\n          getParamValue('b', node, tensorMap, context) as tfc.Tensor2D,\n          getParamValue('transposeA', node, tensorMap, context) as boolean,\n          getParamValue('transposeB', node, tensorMap, context) as boolean)];\n    case 'Transpose':\n      return [tfc.transpose(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('perm', node, tensorMap, context) as number[])];\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'matrices';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node, OpExecutor} from '../types';\nimport {getParamValue} from './utils';\n\nexport let executeOp: OpExecutor = (node: Node, tensorMap: NamedTensorsMap,\n                                    context: ExecutionContext):\n                                       tfc.Tensor[] => {\n  switch (node.op) {\n    case 'FusedBatchNorm':\n    case 'FusedBatchNormV2': {\n      return [tfc.batchNorm(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('mean', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('variance', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('offset', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('scale', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('epsilon', node, tensorMap, context) as number)];\n    }\n    case 'LRN': {\n      return [tfc.localResponseNormalization(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor3D |\n              tfc.Tensor4D,\n          getParamValue('radius', node, tensorMap, context) as number,\n          getParamValue('bias', node, tensorMap, context) as number,\n          getParamValue('alpha', node, tensorMap, context) as number,\n          getParamValue('beta', node, tensorMap, context) as number)];\n    }\n    case 'Softmax': {\n      return [tfc.softmax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'LogSoftmax': {\n      return [tfc.logSoftmax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'SparseToDense': {\n      return [tfc.sparseToDense(\n          getParamValue('sparseIndices', node, tensorMap, context) as\n              tfc.Tensor,\n          getParamValue('outputShape', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('sparseValues', node, tensorMap, context) as number[],\n          getParamValue('defaultValue', node, tensorMap, context) as\n              tfc.Scalar)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'normalization';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node, OpExecutor} from '../types';\nimport {getParamValue} from './utils';\n\nexport let executeOp: OpExecutor = (node: Node, tensorMap: NamedTensorsMap,\n                                    context: ExecutionContext):\n                                       tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Max': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.max(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Mean': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.mean(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Min': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.min(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Sum': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.sum(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'All': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.all(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'Any': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.any(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    case 'ArgMax': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.argMax(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'ArgMin': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.argMin(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'Prod': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const keepDims =\n          getParamValue('keepDims', node, tensorMap, context) as boolean;\n      return [tfc.prod(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis,\n          keepDims)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'reduction';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node, OpExecutor} from '../types';\nimport {getParamValue} from './utils';\n\nexport let executeOp: OpExecutor = (node: Node, tensorMap: NamedTensorsMap,\n                                    context: ExecutionContext):\n                                       tfc.Tensor[] => {\n  switch (node.op) {\n    case 'ConcatV2':\n    case 'Concat': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const inputs =\n          getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[];\n      return [tfc.concat(inputs, axis)];\n    }\n    case 'GatherV2':\n    case 'Gather': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor1D;\n      return [tfc.gather(input, indices.asType('int32'), axis)];\n    }\n    case 'ReverseV2':\n    case 'Reverse': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      const input = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      return [tfc.reverse(input, axis)];\n    }\n    case 'Slice': {\n      // tslint:disable-next-line:no-any\n      const begin = getParamValue('begin', node, tensorMap, context) as any;\n      // tslint:disable-next-line:no-any\n      const size = getParamValue('size', node, tensorMap, context) as any;\n      return [tfc.slice(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, begin,\n          size)];\n    }\n    case 'StridedSlice': {\n      const begin =\n          getParamValue('begin', node, tensorMap, context) as number[];\n      const end = getParamValue('end', node, tensorMap, context) as number[];\n      const strides =\n          getParamValue('strides', node, tensorMap, context) as number[];\n      const beginMask =\n          getParamValue('beginMask', node, tensorMap, context) as number;\n      const endMask =\n          getParamValue('endMask', node, tensorMap, context) as number;\n      const ellipsisMask =\n          getParamValue('ellipsisMask', node, tensorMap, context) as number;\n      const newAxisMask =\n          getParamValue('newAxisMask', node, tensorMap, context) as number;\n      const shrinkAxisMask =\n          getParamValue('shrinkAxisMask', node, tensorMap, context) as number;\n      const tensor = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      if (begin.length === 1 && tensor.shape.length > 1) {\n        for (let i = 1; i < tensor.shape.length; i++) {\n          begin.push(0);\n          end.push(tensor.shape[i]);\n          strides.push(strides[0]);\n        }\n      }\n      return [tfc.stridedSlice(\n          tensor, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask)];\n    }\n    case 'Pack': {\n      return tfc.tidy(() => {\n        const axis = getParamValue('axis', node, tensorMap, context) as number;\n        const tensors =\n            getParamValue('tensors', node, tensorMap, context) as tfc.Tensor[];\n        // Reshape the tensors to the first tensor's shape if they don't match.\n        const shape = tensors[0].shape;\n        const squeezedShape = tensors[0].squeeze().shape;\n        const mapped = tensors.map(tensor => {\n          const sameShape = tfc.util.arraysEqual(tensor.shape, shape);\n          if (!sameShape &&\n              !tfc.util.arraysEqual(tensor.squeeze().shape, squeezedShape)) {\n            throw new Error('the input tensors shape does not match');\n          }\n          return sameShape ? tensor : tensor.reshape(shape);\n        });\n        return [tfc.stack(mapped, axis)];\n      });\n    }\n    case 'Unpack': {\n      return tfc.tidy(() => {\n        const axis = getParamValue('axis', node, tensorMap, context) as number;\n        const tensor =\n            getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n        return tfc.unstack(tensor, axis);\n      });\n    }\n    case 'Tile': {\n      const reps = getParamValue('reps', node, tensorMap, context) as number[];\n      return [tfc.tile(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, reps)];\n    }\n    case 'Split':\n    case 'SplitV': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      const numOrSizeSplits =\n          getParamValue('numOrSizeSplits', node, tensorMap, context) as number |\n          number[];\n      return tfc.split(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          numOrSizeSplits, axis);\n    }\n    case 'ScatterNd': {\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor;\n      const values =\n          getParamValue('values', node, tensorMap, context) as tfc.Tensor;\n      const shape =\n          getParamValue('shape', node, tensorMap, context) as number[];\n      return [tfc.scatterND(indices, values, shape)];\n    }\n    case 'GatherNd': {\n      const x = getParamValue('x', node, tensorMap, context) as tfc.Tensor;\n      const indices =\n          getParamValue('indices', node, tensorMap, context) as tfc.Tensor;\n      return [tfc.gatherND(x, indices)];\n    }\n    case 'SparseToDense': {\n      const indices =\n          getParamValue('sparseIndices', node, tensorMap, context) as\n          tfc.Tensor;\n      const shape =\n          getParamValue('outputShape', node, tensorMap, context) as number[];\n      const sparseValues =\n          getParamValue('sparseValues', node, tensorMap, context) as tfc.Tensor;\n      const defaultValue =\n          getParamValue('defaultValue', node, tensorMap, context) as tfc.Scalar;\n      return [tfc.sparseToDense(\n          indices, sparseValues, shape,\n          sparseValues.dtype === defaultValue.dtype ?\n              defaultValue :\n              defaultValue.asType(sparseValues.dtype))];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'slice_join';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node, OpExecutor} from '../types';\nimport {getParamValue} from './utils';\n\nexport let executeOp: OpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): tfc.Tensor[] => {\n      switch (node.op) {\n        case 'FFT': {\n          return [tfc.fft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'IFFT': {\n          return [tfc.ifft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'RFFT': {\n          return [tfc.rfft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        case 'IRFFT': {\n          return [tfc.irfft(\n              getParamValue('x', node, tensorMap, context) as tfc.Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'spectral';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node, OpExecutor} from '../types';\nimport {getParamValue, split} from './utils';\n\nexport let executeOp: OpExecutor = (node: Node, tensorMap: NamedTensorsMap,\n                                    context: ExecutionContext):\n                                       tfc.Tensor[] => {\n  switch (node.op) {\n    case 'Cast': {\n      return [tfc.cast(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('dtype', node, tensorMap, context) as 'int32' |\n              'float32' | 'bool')];\n    }\n    case 'ExpandDims': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number;\n      return [tfc.expandDims(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n    case 'Squeeze': {\n      const axis = getParamValue('axis', node, tensorMap, context) as number[];\n      return [tfc.squeeze(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor, axis)];\n    }\n\n    case 'Reshape': {\n      return [tfc.reshape(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('shape', node, tensorMap, context) as number[])];\n    }\n    case 'PadV2':\n    case 'Pad': {\n      return [tfc.pad(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          split(\n              getParamValue('padding', node, tensorMap, context) as number[],\n              2) as Array<[number, number]>,\n          getParamValue('constantValue', node, tensorMap, context) as number)];\n    }\n    case 'SpaceToBatchND': {\n      const blockShape =\n          getParamValue('blockShape', node, tensorMap, context) as number[];\n      const paddings = split(\n          getParamValue('paddings', node, tensorMap, context) as number[], 2);\n      return [tfc.spaceToBatchND(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          blockShape, paddings)];\n    }\n    case 'BatchToSpaceND': {\n      const blockShape =\n          getParamValue('blockShape', node, tensorMap, context) as number[];\n      const crops = split(\n          getParamValue('crops', node, tensorMap, context) as number[], 2);\n      return [tfc.batchToSpaceND(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          blockShape, crops)];\n    }\n    case 'DepthToSpace': {\n      const blockSize =\n          getParamValue('blockSize', node, tensorMap, context) as number;\n      const dataFormat =\n          (getParamValue('dataFormat', node, tensorMap, context) as\n           string).toUpperCase() as 'NHWC' |\n          'NCHW';\n      return [tfc.depthToSpace(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor4D,\n          blockSize, dataFormat)];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'transformation';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {ExecutionContext} from '../executor/execution_context';\n\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as transformation from './executors/transformation_executor';\nimport {Node} from './types';\n\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n */\nexport function executeOp(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): tfc.Tensor[]|Promise<tfc.Tensor[]> {\n  const value =\n      ((node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) => {\n        switch (node.category) {\n          case 'arithmetic':\n            return arithmetic.executeOp(node, tensorMap, context);\n          case 'basic_math':\n            return basicMath.executeOp(node, tensorMap, context);\n          case 'control':\n            return control.executeOp(node, tensorMap, context);\n          case 'convolution':\n            return convolution.executeOp(node, tensorMap, context);\n          case 'creation':\n            return creation.executeOp(node, tensorMap, context);\n          case 'dynamic':\n            return dynamic.executeOp(node, tensorMap, context);\n          case 'evaluation':\n            return evaluation.executeOp(node, tensorMap, context);\n          case 'image':\n            return image.executeOp(node, tensorMap, context);\n          case 'graph':\n            return graph.executeOp(node, tensorMap, context);\n          case 'logical':\n            return logical.executeOp(node, tensorMap, context);\n          case 'matrices':\n            return matrices.executeOp(node, tensorMap, context);\n          case 'normalization':\n            return normalization.executeOp(node, tensorMap, context);\n          case 'reduction':\n            return reduction.executeOp(node, tensorMap, context);\n          case 'slice_join':\n            return sliceJoin.executeOp(node, tensorMap, context);\n          case 'spectral':\n            return spectral.executeOp(node, tensorMap, context);\n          case 'transformation':\n            return transformation.executeOp(node, tensorMap, context);\n          default:\n            throw TypeError(`Node type ${node.op} is not implemented`);\n        }\n      })(node, tensorMap, context);\n  if (value instanceof Promise) {\n    return value.then((data) => [].concat(data));\n  }\n  return [].concat(value);\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {scalar} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {TensorArray} from '../../executor/tensor_array';\nimport {Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport async function executeOp(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<tfc.Tensor[]> {\n  switch (node.op) {\n    case 'LoopCond':\n      return [\n        (getParamValue('pred', node, tensorMap, context) as tfc.Tensor).clone()\n      ];\n    case 'Switch': {\n      const pred =\n          getParamValue('pred', node, tensorMap, context) as tfc.Tensor;\n      const data =\n          getParamValue('data', node, tensorMap, context) as tfc.Tensor;\n      // Outputs nodes :0 => false, :1 => true\n      return (await pred.data())[0] ? [undefined, data.clone()] :\n                                      [data.clone(), undefined];\n    }\n    case 'Merge':\n      const inputName = node.inputNames.find(\n          name => getTensor(name, tensorMap, context) !== undefined);\n      return inputName ? [getTensor(inputName, tensorMap, context).clone()] :\n                         undefined;\n\n    case 'Enter':\n      const frameId =\n          getParamValue('frameName', node, tensorMap, context) as string;\n      const data =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.enterFrame(frameId);\n      return [data.clone()];\n\n    case 'Exit':\n      const tensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.exitFrame();\n      return [tensor.clone()];\n\n    case 'NextIteration':\n      const input =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      context.nextIteration();\n      return [input.clone()];\n\n    case 'TensorArrayV3':\n      const size = getParamValue('size', node, tensorMap, context) as number;\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const dynamicSize =\n          getParamValue('dynamicSize', node, tensorMap, context) as boolean;\n      const clearAfterRead =\n          getParamValue('clearAfterRead', node, tensorMap, context) as boolean;\n      const identicalElementShapes =\n          getParamValue('identicalElementShapes', node, tensorMap, context) as\n          boolean;\n      const name = getParamValue('name', node, tensorMap, context) as string;\n      const tensorArray = new TensorArray(\n          name, dtype, size, elementShape, identicalElementShapes, dynamicSize,\n          clearAfterRead);\n      context.addTensorArray(tensorArray);\n      return [scalar(tensorArray.id), scalar(1.0)];\n\n    case 'TensorArrayWriteV3':\n      const id =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const writeTensorArray = context.getTensorArray(id);\n      writeTensorArray.write(index, writeTensor);\n      return [scalar(1.0)];\n\n    case 'TensorArrayReadV3':\n      const readId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const readTensorArray = context.getTensorArray(readId);\n      return [readTensorArray.read(readIndex)];\n\n    case 'TensorArrayGatherV3':\n      const gatherId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const gatherDtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      const gatherTensorArray = context.getTensorArray(gatherId);\n      return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n\n    case 'TensorArrayScatterV3':\n      const scatterId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const scatterTensorArray = context.getTensorArray(scatterId);\n      scatterTensorArray.scatter(scatterIndices, scatterTensor);\n      return [scalar(1.0)];\n\n    case 'TensorArrayConcatV3':\n      const concatId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const concatTensorArray = context.getTensorArray(concatId);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as tfc.DataType;\n      return [concatTensorArray.concat(concatDtype)];\n\n    case 'TensorArraySplitV3':\n      const splitId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as tfc.Tensor;\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n      const splitTensorArray = context.getTensorArray(splitId);\n      splitTensorArray.split(lengths, splitTensor);\n      return [scalar(1.0)];\n\n    case 'TensorArraySizeV3':\n      const sizeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const sizeTensorArray = context.getTensorArray(sizeId);\n      return [scalar(sizeTensorArray.size(), 'int32')];\n\n    case 'TensorArrayCloseV3':\n      const closeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as number;\n      const closeTensorArray = context.getTensorArray(closeId);\n      closeTensorArray.clearAndClose();\n      return [];\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n}\n\nexport const CATEGORY = 'control';\n","/**\n * @license\n * Copyright 2018 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {Node} from '../types';\nimport {getParamValue} from './utils';\n\nexport async function executeOp(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<tfc.Tensor[]> {\n  switch (node.op) {\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2': {\n      const boxes =\n          getParamValue('boxes', node, tensorMap, context) as tfc.Tensor;\n      const scores =\n          getParamValue('scores', node, tensorMap, context) as tfc.Tensor;\n      const maxOutputSize =\n          getParamValue('maxOutputSize', node, tensorMap, context) as number;\n      const iouThreshold =\n          getParamValue('iouThreshold', node, tensorMap, context) as number;\n      const scoreThreshold =\n          getParamValue('scoreThreshold', node, tensorMap, context) as number;\n      return [await tfc.image.nonMaxSuppressionAsync(\n          boxes as tfc.Tensor2D, scores as tfc.Tensor1D, maxOutputSize,\n          iouThreshold, scoreThreshold)];\n    }\n    case 'Where': {\n      return [await tfc.whereAsync(\n          getParamValue('condition', node, tensorMap, context) as tfc.Tensor)];\n    }\n    case 'ListDiff': {\n      return await tfc.setdiff1dAsync(\n          getParamValue('x', node, tensorMap, context) as tfc.Tensor,\n          getParamValue('y', node, tensorMap, context) as tfc.Tensor);\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n}\n\nexport const CATEGORY = 'dynamic';\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap, TensorArrayMap} from '../data/types';\n\nimport {TensorArray} from './tensor_array';\n\nexport interface ExecutionContextInfo {\n  id: number;           // the unique id of the context info\n  frameName: string;    // The frame name of the loop, this comes from\n                        // the TensorFlow NodeDef.\n  iterationId: number;  // The iteration id of the loop\n}\n\n/**\n * ExecutionContext captures the runtime environment of the node. It keeps\n * track of the current frame and iteration for the control flow ops.\n *\n * For example, typical Dynamic RNN model may contain loops, for which\n * TensorFlow will generate graphs with Enter/Exit nodes to control the\n * current execution frame, and NextIteration Nodes for iteration id increment.\n * For model with branch logic, TensorFLow will generate Switch/Merge ops.\n */\nexport class ExecutionContext {\n  private rootContext = {id: 0, frameName: '', iterationId: 0};\n  private contexts: ExecutionContextInfo[] = [this.rootContext];\n  private lastId = 0;\n  private _currentContextIds: string[];\n\n  constructor(\n      public readonly weightMap: NamedTensorsMap,\n      public readonly tensorArrayMap: TensorArrayMap) {\n    this.generateCurrentContextIds();\n  }\n\n  private newFrame(id: number, frameName: string) {\n    return {id, frameName, iterationId: 0};\n  }\n\n  /**\n   * Set the current context\n   * @param contexts: ExecutionContextInfo[] the current path of execution\n   * frames\n   */\n  set currentContext(contexts: ExecutionContextInfo[]) {\n    if (this.contexts !== contexts) {\n      this.contexts = contexts;\n      this.generateCurrentContextIds();\n    }\n  }\n\n  get currentContext(): ExecutionContextInfo[] {\n    return this.contexts;\n  }\n\n  /**\n   * Returns the current context in string format.\n   */\n  get currentContextId(): string {\n    return this._currentContextIds[0];\n  }\n\n  /**\n   * Returns the current context and all parent contexts in string format.\n   * This allow access to the nodes in the current and parent frames.\n   */\n  get currentContextIds(): string[] {\n    return this._currentContextIds;\n  }\n\n  private generateCurrentContextIds() {\n    const names = [];\n    for (let i = 0; i < this.contexts.length - 1; i++) {\n      const contexts = this.contexts.slice(0, this.contexts.length - i);\n      names.push(this.contextIdforContexts(contexts));\n    }\n    names.push('');\n    this._currentContextIds = names;\n  }\n\n  private contextIdforContexts(contexts: ExecutionContextInfo[]) {\n    return contexts ?\n        contexts\n            .map(\n                context => (context.id === 0 && context.iterationId === 0) ?\n                    '' :\n                    `${context.frameName}-${context.iterationId}`)\n            .join('/') :\n        '';\n  }\n\n  /**\n   * Enter a new frame, a new context is pushed on the current context list.\n   * @param frameId new frame id\n   */\n  enterFrame(frameId: string) {\n    if (this.contexts) {\n      this.lastId++;\n      this.contexts = this.contexts.slice();\n      this.contexts.push(this.newFrame(this.lastId, frameId));\n      this._currentContextIds.unshift(this.contextIdforContexts(this.contexts));\n    }\n  }\n\n  /**\n   * Exit the current frame, the last context is removed from the current\n   * context list.\n   */\n  exitFrame() {\n    if (this.contexts && this.contexts.length > 1) {\n      this.contexts = this.contexts.slice();\n      this.contexts.splice(-1);\n      this.currentContextIds.shift();\n    } else {\n      throw new Error('Cannot exit frame, the context is empty');\n    }\n  }\n\n  /**\n   * Enter the next iteration of a loop, the iteration id of last context is\n   * increased.\n   */\n  nextIteration() {\n    if (this.contexts && this.contexts.length > 0) {\n      this.contexts = this.contexts.slice();\n      this.lastId++;\n      const context =\n          Object.assign({}, this.contexts[this.contexts.length - 1]) as\n          ExecutionContextInfo;\n      context.iterationId += 1;\n      context.id = this.lastId;\n      this.contexts.splice(-1, 1, context);\n      this._currentContextIds.splice(\n          0, 1, this.contextIdforContexts(this.contexts));\n    } else {\n      throw new Error('Cannot increase frame iteration, the context is empty');\n    }\n  }\n\n  getWeight(name: string): Tensor[] {\n    return this.weightMap[name];\n  }\n\n  addTensorArray(tensorArray: TensorArray) {\n    this.tensorArrayMap[tensorArray.id] = tensorArray;\n  }\n\n  getTensorArray(id: number): TensorArray {\n    return this.tensorArrayMap[id];\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor, tidy, util} from '@tensorflow/tfjs-core';\n\n// tslint:disable-next-line:max-line-length\nimport {NamedTensorMap, NamedTensorsMap, TensorArrayMap, TensorInfo} from '../data/types';\n// tslint:disable-next-line:max-line-length\nimport {getNodeNameAndIndex, getParamValue, getTensor, getTensorsForCurrentContenxt, parseNodeName} from '../operations/executors/utils';\nimport {executeOp} from '../operations/operation_executor';\nimport {Graph, Node} from '../operations/types';\n\nimport {ExecutionContext, ExecutionContextInfo} from './execution_context';\n\ninterface NodeWithContexts {\n  contexts: ExecutionContextInfo[];\n  node: Node;\n}\n\nexport class GraphExecutor {\n  private compiledMap: Map<string, Node[]> = new Map();\n  private _weightMap: NamedTensorsMap = {};\n  private weightIds: number[];\n  private placeholders: Node[];\n  private _outputs: Node[];\n  private SEPERATOR = ',';\n  get weightMap(): NamedTensorsMap {\n    return this._weightMap;\n  }\n  set weightMap(weightMap: NamedTensorsMap) {\n    const weightIds = Object.keys(weightMap).map(\n        key => weightMap[key].map(tensor => tensor.id));\n    this.weightIds = [].concat.apply([], weightIds);\n    this._weightMap = weightMap;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this.placeholders.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get outputs(): TensorInfo[] {\n    return this._outputs.map(node => {\n      return {\n        name: node.name,\n        shape: node.attrParams['shape'] ?\n            node.attrParams['shape'].value as number[] :\n            undefined,\n        dtype: node.attrParams['dtype'] ?\n            node.attrParams['dtype'].value as DataType :\n            undefined\n      };\n    });\n  }\n\n  get inputNodes(): string[] {\n    return this.placeholders.map(node => node.name);\n  }\n\n  get outputNodes(): string[] {\n    return this.outputs.map(node => node.name);\n  }\n\n  constructor(private graph: Graph) {\n    this.placeholders = graph.placeholders;\n    this._outputs = graph.outputs;\n    this.compile();\n  }\n\n  get isControlFlowModel(): boolean {\n    return this.graph.withControlFlow;\n  }\n\n  get isDynamicShapeModel(): boolean {\n    return this.graph.withDynamicShape;\n  }\n\n  /**\n   * Compiles the inference graph to generate the topology order of op nodes,\n   * cache the result for inference execution.\n   */\n  private compile(startNodes?: Node[]) {\n    // Do not compile for graph with control flow, since the execution order\n    // requires runtime evaluation of the output tensors.\n    if (this.graph.withControlFlow || this.graph.withDynamicShape) {\n      return;\n    }\n    const compiledOrder = [];\n    const inputs = startNodes || this.graph.placeholders;\n    const sortedNodeNames = inputs.map(node => node.name).sort();\n    const nameKey = sortedNodeNames.join(this.SEPERATOR);\n\n    // do nothing is the compiled graph cache contains the input.\n    if (this.compiledMap.get(nameKey)) {\n      return;\n    }\n\n    const stack = [...inputs, ...this.graph.weights];\n    const visited: {[key: string]: boolean} = {};\n    while (stack.length > 0) {\n      const node = stack.pop();\n      visited[node.name] = true;\n      compiledOrder.push(node);\n      node.children.forEach((childNode) => {\n        if (!visited[childNode.name] && childNode.inputNames.every(name => {\n              const [nodeName, ] = getNodeNameAndIndex(name);\n              return visited[nodeName];\n            })) {\n          stack.push(childNode);\n        }\n      });\n    }\n    this.compiledMap.set(nameKey, compiledOrder);\n  }\n\n  /**\n   * Executes the inference for given input tensors.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  execute(\n      inputs: NamedTensorsMap, strictInputCheck = true,\n      outputs?: string|string[]): NamedTensorMap {\n    const names = Object.keys(inputs).sort();\n    this.checkInput(inputs, strictInputCheck);\n    this.checkInputShapeAndType(inputs, strictInputCheck);\n\n    this.compile(names.map(name => this.graph.nodes[name]));\n    const outputNames = this.calculateOutputs(outputs);\n    this.checkOutput(\n        this.compiledMap.get(names.join(this.SEPERATOR)), outputNames);\n\n    const tensorArrayMap: TensorArrayMap = {};\n    const result = tidy(() => {\n      const context = new ExecutionContext(this._weightMap, tensorArrayMap);\n      const tensorMap = {...this.weightMap, ...inputs};\n      const tensorsToKeep = this.getFrozenTensorIds(tensorMap);\n      const intermediateTensorConsumerCount: {[key: number]: number} = {};\n\n      const compiledNodes = this.compiledMap.get(names.join(this.SEPERATOR));\n      for (let i = 0; i < compiledNodes.length; i++) {\n        const node = compiledNodes[i];\n        if (!tensorMap[node.name]) {\n          tensorMap[node.name] =\n              executeOp(node, tensorMap, context) as Tensor[];\n          this.checkTensorForDisposal(\n              node.name, node, tensorMap, context, tensorsToKeep, outputNames,\n              intermediateTensorConsumerCount);\n        }\n        // stop the execution if all outputs are found.\n        if (outputNames.every(name => !!tensorMap[name])) {\n          break;\n        }\n      }\n      return this.findOutputs(tensorMap, context, outputNames);\n    });\n    return result;\n  }\n\n  private getFrozenTensorIds(tensorMap: NamedTensorsMap): Set<number> {\n    const ids = [].concat.apply(\n        [],\n        Object.keys(tensorMap)\n            .map(key => tensorMap[key])\n            .map(tensors => tensors.map(tensor => tensor.id)));\n    return new Set(ids);\n  }\n  private checkTensorForDisposal(\n      nodeName: string, node: Node, tensorMap: NamedTensorsMap,\n      context: ExecutionContext, tensorsToKeep: Set<number>,\n      outputNames: string[],\n      intermediateTensorConsumerCount: {[key: string]: number}) {\n    // Skip output nodes and any control flow nodes, since its dependency is\n    // tricky to track correctly.\n    if (node.category === 'control' || outputNames.indexOf(nodeName) !== -1) {\n      return;\n    }\n\n    tensorMap[nodeName].forEach(tensor => {\n      if (tensor != null) {\n        intermediateTensorConsumerCount[tensor.id] =\n            (intermediateTensorConsumerCount[tensor.id] || 0) +\n            node.children.length;\n      }\n    });\n    node.inputs.forEach(input => {\n      // Skip any control flow nodes, since its dependency is tricky to track\n      // correctly.\n      if (input.category !== 'control') {\n        const tensors =\n            getTensorsForCurrentContenxt(input.name, tensorMap, context);\n        if (tensors != null) {\n          tensors.forEach(tensor => {\n            if (tensor && !tensorsToKeep.has(tensor.id)) {\n              const count = intermediateTensorConsumerCount[tensor.id];\n              if (count === 1) {\n                tensor.dispose();\n                delete intermediateTensorConsumerCount[tensor.id];\n              } else if (count != null) {\n                // only intermediate nodes has count set, inputs and weights are\n                // not.\n                intermediateTensorConsumerCount[tensor.id]--;\n              }\n            }\n          });\n        }\n      }\n    });\n  }\n  /**\n   * Executes the inference for given input tensors in Async fashion.\n   * @param inputs Tensor map for the model inputs, keyed by the input node\n   * names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   */\n  async executeAsync(inputs: NamedTensorsMap, outputs?: string|string[]):\n      Promise<NamedTensorMap> {\n    this.checkInput(inputs, false);\n    this.checkInputShapeAndType(inputs, false);\n    const tensorArrayMap: TensorArrayMap = {};\n    const context = new ExecutionContext(this._weightMap, tensorArrayMap);\n    const outputNames = this.calculateOutputs(outputs);\n    // Graph with control flow op requires runtime evaluation of the execution\n    // order, while without control flow the execution order is pre-determined\n    // in the compile method.\n    const tensors =\n        await this.executeWithControlFlow(inputs, context, outputNames);\n    const results = this.findOutputs(tensors, context, outputs);\n\n    // dispose all the intermediate tensors\n    const outputIds = Object.keys(results).map(key => results[key].id);\n    const inputIdArray =\n        Object.keys(inputs).map(key => inputs[key].map(input => input.id));\n    const inputIds = [].concat.apply([], inputIdArray);\n    Object.keys(tensors).forEach(key => {\n      const tensorArray = tensors[key];\n      tensorArray.forEach(tensor => {\n        if (tensor && !tensor.isDisposed &&\n            outputIds.indexOf(tensor.id) === -1 &&\n            inputIds.indexOf(tensor.id) === -1 &&\n            this.weightIds.indexOf(tensor.id) === -1) {\n          tensor.dispose();\n        }\n      });\n    });\n    return results;\n  }\n\n  /**\n   * When there are control flow nodes in the graph, the graph execution use\n   * ExecutionContext to keep track of the frames and loop iterators.\n   * @param inputs placeholder tensors for the graph.\n   * @param context the execution context object for current execution.\n   */\n  private async executeWithControlFlow(\n      inputs: NamedTensorsMap, context: ExecutionContext,\n      outputNames: string[]): Promise<NamedTensorsMap> {\n    const names = Object.keys(inputs);\n    const inputNodes = names.map(name => this.graph.nodes[name]);\n    const stack: NodeWithContexts[] =\n        [...inputNodes, ...this.graph.weights].map(node => {\n          return {node, contexts: context.currentContext};\n        });\n    const tensorMap = {...this.weightMap, ...inputs};\n    const intermediateTensorConsumerCount: {[key: number]: number} = {};\n    const tensorsToKeep = this.getFrozenTensorIds(tensorMap);\n    const added: {[key: string]: boolean} = {};\n    while (stack.length > 0) {\n      const promises = this.processStack(\n          inputNodes, stack, context, tensorMap, added, tensorsToKeep,\n          outputNames, intermediateTensorConsumerCount);\n      await Promise.all(promises);\n    }\n    return tensorMap;\n  }\n\n  private processStack(\n      inputNodes: Node[], stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean},\n      tensorsToKeep: Set<number>, outputNames: string[],\n      intermediateTensorConsumerCount: {[key: number]: number}) {\n    const promises: Array<Promise<Tensor[]>> = [];\n    while (stack.length > 0) {\n      const item = stack.pop();\n      context.currentContext = item.contexts;\n      let nodeName = '';\n      // The tensor of the Enter op with isConstant set should be set\n      // in the parent scope, so it will be available as constant for the\n      // whole loop.\n      if (item.node.op === 'Enter' &&\n          getParamValue('isConstant', item.node, tensorMap, context)) {\n        [nodeName] = getNodeNameAndIndex(item.node.name, context);\n      }\n\n      // only process nodes that are not provided as input nodes.\n      if (inputNodes.indexOf(item.node) === -1) {\n        const tensors = executeOp(item.node, tensorMap, context);\n        if (!nodeName) {\n          [nodeName] = getNodeNameAndIndex(item.node.name, context);\n        }\n        const currentContext = context.currentContext;\n        if (tensors instanceof Promise) {\n          promises.push(tensors.then(t => {\n            tensorMap[nodeName] = t;\n            context.currentContext = currentContext;\n            this.checkTensorForDisposal(\n                nodeName, item.node, tensorMap, context, tensorsToKeep,\n                outputNames, intermediateTensorConsumerCount);\n            this.processChildNodes(item.node, stack, context, tensorMap, added);\n            return t;\n          }));\n        } else {\n          tensorMap[nodeName] = tensors;\n          this.checkTensorForDisposal(\n              nodeName, item.node, tensorMap, context, tensorsToKeep,\n              outputNames, intermediateTensorConsumerCount);\n          this.processChildNodes(item.node, stack, context, tensorMap, added);\n        }\n      } else {\n        this.processChildNodes(item.node, stack, context, tensorMap, added);\n      }\n    }\n    return promises;\n  }\n\n  private processChildNodes(\n      node: Node, stack: NodeWithContexts[], context: ExecutionContext,\n      tensorMap: NamedTensorsMap, added: {[key: string]: boolean}) {\n    node.children.forEach((childNode) => {\n      const [nodeName, ] = getNodeNameAndIndex(childNode.name, context);\n      if (!added[nodeName]) {\n        // Merge op can be pushed if any of its inputs has value.\n        if (childNode.op === 'Merge') {\n          if (childNode.inputNames.some(name => {\n                return !!getTensor(name, tensorMap, context);\n              })) {\n            added[nodeName] = true;\n            stack.push({contexts: context.currentContext, node: childNode});\n          }\n        } else  // Otherwise all inputs must to have value.\n            if (childNode.inputNames.every(name => {\n                  return !!getTensor(name, tensorMap, context);\n                })) {\n          added[nodeName] = true;\n          stack.push({contexts: context.currentContext, node: childNode});\n        }\n      }\n    });\n  }\n\n  private calculateOutputs(outputs?: string|string[]): string[] {\n    if (outputs && !(outputs instanceof Array)) {\n      outputs = [outputs];\n    }\n    return (outputs || this.graph.outputs.map(node => node.name)) as string[];\n  }\n\n  private findOutputs(\n      tensorMap: NamedTensorsMap, context: ExecutionContext,\n      outputs?: string|string[]): NamedTensorMap {\n    const requestedOutputs = this.calculateOutputs(outputs);\n    return requestedOutputs.reduce<NamedTensorMap>((map, name) => {\n      map[name] = getTensor(name, tensorMap, context);\n      return map;\n    }, {});\n  }\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  dispose() {\n    Object.keys(this.weightMap)\n        .forEach(\n            key => this.weightMap[key].forEach(tensor => tensor.dispose()));\n  }\n\n  private checkInputShapeAndType(\n      inputs: NamedTensorsMap, strictInputCheck = true) {\n    this.placeholders.forEach(node => {\n      const inputTensors = inputs[node.name];\n      // do nothing if not strict input check and input tensors is not for\n      // the placeholders.\n      if (!strictInputCheck && !inputTensors) {\n        return;\n      }\n\n      const input = inputTensors[0];\n      if (node.attrParams['shape'] && node.attrParams['shape'].value) {\n        const shape = node.attrParams['shape'].value as number[];\n        const match = shape.length === input.shape.length &&\n            input.shape.every(\n                (dim, index) => shape[index] === -1 || shape[index] === dim);\n        util.assert(\n            match,\n            () => `The shape of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be [${shape}], but was ` +\n                `[${input.shape}]`);\n      }\n      if (node.attrParams['dtype'] && node.attrParams['dtype'].value) {\n        util.assert(\n            input.dtype === node.attrParams['dtype'].value as string,\n            () => `The dtype of dict['${node.name}'] provided in ` +\n                `model.execute(dict) must be ` +\n                `${node.attrParams['dtype'].value}, but was ${input.dtype}`);\n      }\n    });\n  }\n\n  private checkInput(inputs: NamedTensorsMap, strictInputCheck = true) {\n    const inputKeys = Object.keys(inputs);\n    const missing: string[] = [];\n    const extra: string[] = [];\n\n    this.inputNodes.forEach(name => {\n      if (inputKeys.indexOf(name) === -1) missing.push(name);\n    });\n\n    inputKeys.forEach(name => {\n      if (this.inputNodes.indexOf(name) === -1) extra.push(name);\n    });\n\n    const notInGraph = extra.filter(name => !this.graph.nodes[name]);\n\n    if (missing.length > 0 && strictInputCheck) {\n      throw new Error(\n          `The dict provided in model.execute(dict) has the keys ` +\n          `[${inputKeys}], but is missing the required keys: [${missing}].`);\n    }\n\n    if (extra.length > 0 && strictInputCheck) {\n      throw new Error(\n          `The dict provided in model.execute(dict) has ` +\n          `unused keys: [${extra}]. Please provide only the following keys: ` +\n          `[${this.inputNodes}].`);\n    }\n\n    if (notInGraph.length > 0) {\n      throw new Error(\n          `The dict provided in model.execute(dict) has ` +\n          `keys: [${notInGraph}] not part of model graph.`);\n    }\n  }\n\n  private checkOutput(compiledNodes: Node[], outputs: string[]) {\n    const compiledNodeNames = compiledNodes.map(node => node.name);\n    const extra: string[] = [];\n    outputs.forEach(name => {\n      const [nodeName] = parseNodeName(name);\n      if (compiledNodeNames.indexOf(nodeName) === -1) extra.push(nodeName);\n    });\n\n    if (extra.length > 0) {\n      throw new Error(\n          `The following outputs are not generated by the execution: ` +\n          `[${extra}].`);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {InferenceModel, io, ModelPredictConfig, NamedTensorMap, Tensor} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {NamedTensorsMap, TensorInfo} from '../data/types';\nimport {OperationMapper} from '../operations/operation_mapper';\n\nimport {GraphExecutor} from './graph_executor';\n\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\n\n/**\n * A `tf.GraphModel` is a directed, acyclic graph of built from\n * SavedModel GraphDef and allows inference exeuction.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n */\n/** @doc {heading: 'Models', subheading: 'Classes'} */\nexport class GraphModel implements InferenceModel {\n  private executor: GraphExecutor;\n  private version = 'n/a';\n  private handler: io.IOHandler;\n  // Returns the version information for the tensorflow model GraphDef.\n  get modelVersion(): string {\n    return this.version;\n  }\n\n  get inputNodes(): string[] {\n    return this.executor.inputNodes;\n  }\n\n  get outputNodes(): string[] {\n    return this.executor.outputNodes;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this.executor.inputs;\n  }\n\n  get outputs(): TensorInfo[] {\n    return this.executor.outputs;\n  }\n\n  get weights(): NamedTensorsMap {\n    return this.executor.weightMap;\n  }\n\n  /**\n   * @param modelUrl url for the model, or an `io.IOHandler`.\n   * @param weightManifestUrl url for the weight file generated by\n   * scripts/convert.py script.\n   * @param requestOption options for Request, which allows to send credentials\n   * and custom headers.\n   * @param onProgress Optional, progress callback function, fired periodically\n   * before the load is completed.\n   */\n  constructor(\n      private modelUrl: string|io.IOHandler,\n      private loadOptions: io.LoadOptions = {}) {\n    if (loadOptions == null) {\n      this.loadOptions = {};\n    }\n  }\n\n  private findIOHandler() {\n    const path = this.modelUrl;\n    if ((path as io.IOHandler).load != null) {\n      // Path is an IO Handler.\n      this.handler = path as io.IOHandler;\n    } else if (this.loadOptions.requestInit != null) {\n      this.handler = io.browserHTTPRequest(path as string, this.loadOptions);\n    } else {\n      const handlers =\n          io.getLoadHandlers(path as string, this.loadOptions.onProgress);\n      if (handlers.length === 0) {\n        // For backward compatibility: if no load handler can be found,\n        // assume it is a relative http path.\n        handlers.push(io.browserHTTPRequest(path as string, this.loadOptions));\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) load handlers for ` +\n            `URL '${[path]}'`);\n      }\n      this.handler = handlers[0];\n    }\n  }\n\n  /**\n   * Loads the model and weight files, construct the in memory weight map and\n   * compile the inference graph.\n   */\n  async load(): Promise<boolean> {\n    this.findIOHandler();\n    if (this.handler.load == null) {\n      throw new Error(\n          'Cannot proceed with model loading because the IOHandler provided ' +\n          'does not have the `load` method implemented.');\n    }\n    const artifacts = await this.handler.load();\n    const graph = artifacts.modelTopology as tensorflow.IGraphDef;\n\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    const weightMap =\n        io.decodeWeights(artifacts.weightData, artifacts.weightSpecs);\n    this.executor =\n        new GraphExecutor(OperationMapper.Instance.transformGraph(graph));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n    return true;\n  }\n\n  /**\n   * Execute the inference for the input tensors.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    model.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size and\n   * output node names. Currently the batch size option is ignored for graph\n   * model.\n   *\n   * @returns Inference result tensors. The output would be single `tf.Tensor`\n   * if model has single output node, otherwise Tensor[] or NamedTensorMap[]\n   * will be returned for model with multiple outputs.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  predict(inputs: Tensor|Tensor[]|NamedTensorMap, config?: ModelPredictConfig):\n      Tensor|Tensor[]|NamedTensorMap {\n    return this.execute_(inputs, true, this.outputNodes);\n  }\n\n  private constructTensorMap(inputs: Tensor|Tensor[]) {\n    const inputArray = inputs instanceof Tensor ? [inputs] : inputs;\n    if (inputArray.length !== this.inputNodes.length) {\n      throw new Error(\n          'Input tensor count mismatch,' +\n          `the graph model has ${this.inputNodes.length} placeholders, ` +\n          `while there are ${inputArray.length} input tensors.`);\n    }\n    return this.inputNodes.reduce((map, inputName, i) => {\n      map[inputName] = inputArray[i];\n      return map;\n    }, {} as NamedTensorMap);\n  }\n  /**\n   * Executes inference for the model for given input tensors.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no\n   * outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   *\n   * @returns A single tensor if provided with a single output or no outputs\n   * are provided and there is only one default output, otherwise return a\n   * tensor array. The order of the tensor array is the same as the outputs\n   * if provided, otherwise the order of outputNodes attribute of the model.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  execute(inputs: Tensor|Tensor[]|NamedTensorMap, outputs?: string|string[]):\n      Tensor|Tensor[] {\n    return this.execute_(inputs, false, outputs);\n  }\n\n  private execute_(\n      inputs: Tensor|Tensor[]|NamedTensorMap, strictInputCheck = true,\n      outputs?: string|string[]): Tensor|Tensor[] {\n    outputs = outputs || this.outputNodes;\n    if (inputs instanceof Tensor || Array.isArray(inputs)) {\n      inputs = this.constructTensorMap(inputs);\n    }\n    if (this.executor.isControlFlowModel || this.executor.isDynamicShapeModel) {\n      throw new Error(\n          'The model contains control flow or dynamic shape ops, ' +\n          'please use executeAsync method');\n    }\n    const result = this.executor.execute(\n        this.convertTensorMapToTensorsMap(inputs), strictInputCheck, outputs);\n    const keys = Object.keys(result);\n    return (Array.isArray(outputs) && outputs.length > 1) ?\n        outputs.map(node => result[node]) :\n        result[keys[0]];\n  }\n  /**\n   * Executes inference for the model for given input tensors in async\n   * fashion, use this method when your model contains control flow ops.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   *\n   * @returns A Promise of single tensor if provided with a single output or\n   * no outputs are provided and there is only one default output, otherwise\n   * return a tensor map.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  async executeAsync(\n      inputs: Tensor|Tensor[]|NamedTensorMap,\n      outputs?: string|string[]): Promise<Tensor|Tensor[]> {\n    if (!(this.executor.isControlFlowModel ||\n          this.executor.isDynamicShapeModel)) {\n      throw new Error(\n          'The model does not contain control flow or dynamic shape ops, ' +\n          'please use execute method for better performance.');\n    }\n    outputs = outputs || this.outputNodes;\n    if (inputs instanceof Tensor || Array.isArray(inputs)) {\n      inputs = this.constructTensorMap(inputs);\n    }\n\n    const result = await this.executor.executeAsync(\n        this.convertTensorMapToTensorsMap(inputs), outputs);\n    const keys = Object.keys(result);\n    return Array.isArray(outputs) && outputs.length > 1 ?\n        outputs.map(node => result[node]) :\n        result[keys[0]];\n  }\n\n  private convertTensorMapToTensorsMap(map: NamedTensorMap): NamedTensorsMap {\n    return Object.keys(map).reduce((newMap: NamedTensorsMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n\n  /**\n   * Releases the memory used by the weight tensors.\n   */\n  /** @doc {heading: 'Models', subheading: 'Classes'} */\n  dispose() {\n    this.executor.dispose();\n  }\n}\n\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with\n * a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send credentials\n *    and custom headers.\n */\n/** @doc {heading: 'Models', subheading: 'Loading'} */\nexport async function loadGraphModel(\n    modelUrl: string|io.IOHandler,\n    options: io.LoadOptions = {}): Promise<GraphModel> {\n  if (modelUrl == null) {\n    throw new Error(\n        'modelUrl in loadGraphModel() cannot be null. Please provide a url ' +\n        'or an IOHandler that loads the model');\n  }\n  if (options == null) {\n    options = {};\n  }\n\n  if (options.fromTFHub) {\n    if ((modelUrl as io.IOHandler).load == null) {\n      if (!(modelUrl as string).endsWith('/')) {\n        modelUrl = (modelUrl as string) + '/';\n      }\n      modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n    }\n  }\n  const model = new GraphModel(modelUrl, options);\n  await model.load();\n  return model;\n}\n","/** @license See the LICENSE file. */\n\n// This code is auto-generated, do not modify this file!\nconst version = '1.0.4';\nexport {version};\n"],"names":["DataType","SaverDef","getParamValue","paramName","node","tensorMap","context","inputParam","inputParams","undefined","inputIndexStart","start","end","inputIndexEnd","type","getTensor","inputNames","slice","map","name","data","Array","prototype","call","dataSync","attrParam","attrParams","value","tensorsMap","_a","nodeName","index","contextId","currentContextIds","find","getNodeNameWithContextId","getNodeNameAndIndex","inputName","currentContextId","parseNodeName","lastIndexOf","substring","Number","split","arr","size","res","i","length","push","CheckpointFormatVersion","tfOpName","category","inputs","attrs","tfName","notSupported","defaultValue","tfDeprecatedName","CONTROL_FLOW_OPS","DYNAMIC_SHAPE_OPS","ops","arithmetic","basicMath","control","convolution","creation","dynamic","evaluation","logical","image","graph","matrices","normalization","reduction","sliceJoin","spectral","transformation","mappersJson","concat","apply","op","json","this","opMappers","reduce","mapper","Object","OperationMapper","_instance","some","withControlFlow","withDynamicShape","placeholders","weights","nodes","_this","mapNode","isControlFlow","isDynamicShape","outputs","keys","forEach","key","children","Error","newNode","input","startsWith","substr","attr","param","getStringParam","getNumberParam","getNumericArrayParam","getBoolParam","getTensorShapeParam","getDtypeParam","text","global","ENV","atob","Buffer","toString","def","keepCase","isArray","s","String","fromCharCode","decodeBase64","toLowerCase","b","parseInt","tensorflow.DataType","DT_FLOAT","DT_INT32","DT_BOOL","shape","unknownRank","dim","list","f","v","executeOp","tfc.add","tfc.addN","tfc.mod","tfc.mul","tfc.div","tfc.floorDiv","tfc.sub","tfc.minimum","tfc.maximum","tfc.pow","tfc.squaredDifference","TypeError","tfc.abs","tfc.acos","tfc.acosh","tfc.asin","tfc.asinh","tfc.atan","tfc.atan2","tfc.atanh","tfc.ceil","tfc.cos","tfc.cosh","tfc.elu","tfc.erf","tfc.exp","tfc.expm1","tfc.floor","tfc.log","tfc.log1p","tfc.neg","tfc.reciprocal","tfc.relu","tfc.round","tfc.selu","tfc.sigmoid","tfc.sin","tfc.sign","tfc.sinh","tfc.softplus","tfc.sqrt","tfc.square","tfc.tanh","tfc.tan","tfc.clipByValue","tfc.rsqrt","tfc.prod","tfc.leakyRelu","dtype","maxSize","elementShape","identicalElementShapes","dynamicSize","clearAfterRead","id","TensorArray","nextId","closed_","tensors","tensor","dispose","tensorWithState","cleared","read","indices","t","assertShapesMatchAllowUndefinedSize","written","write","readMany","stack","maxIndex","Math","max","writeMany","unstack","totalLength","cumulativeLengths","len","elementPerRow","tidy","reshape","indices_1","sizes","shapeA","shapeB","errorMessagePrefix","util","assert","shapesEqualAllowUndefinedSize","n1","n2","stride","pad","dataFormat","toUpperCase","dilation","tfc.conv1d","dilations","tfc.conv2d","tfc.conv2dTranspose","tfc.depthwiseConv2d","kernelSize","tfc.avgPool","tfc.maxPool","tfc.fill","stop_1","num","tfc.linspace","depth","onValue","offValue","tfc.oneHot","tfc.ones","tfc.onesLike","tfc.randomUniform","stop_2","step","tfc.range","mean","stdDev","seed","tfc.truncatedNormal","tfc.zeros","tfc.zerosLike","x","k","sorted","result","tfc.topk","values","clone","tfc.tensor1d","tfc.scalar","rank","message","summarize","console","warn","log","images","alignCorners","tfc.image","resizeBilinear","resizeNearestNeighbor","boxes","boxInd","cropSize","method","extrapolationValue","cropAndResize","tfc.equal","tfc.notEqual","tfc.greater","tfc.greaterEqual","tfc.less","tfc.lessEqual","tfc.logicalAnd","tfc.logicalNot","tfc.logicalOr","tfc.where","tfc.matMul","tfc.transpose","tfc.batchNorm","tfc.localResponseNormalization","tfc.softmax","tfc.logSoftmax","tfc.sparseToDense","axis","keepDims","tfc.max","tfc.mean","tfc.min","tfc.sum","tfc.all","tfc.any","tfc.argMax","tfc.argMin","tfc.concat","tfc.gather","asType","tfc.reverse","begin","tfc.slice","strides","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","tfc.stridedSlice","tfc.tidy","squeezedShape","squeeze","mapped","sameShape","tfc.util","arraysEqual","tfc.stack","tfc.unstack","reps","tfc.tile","numOrSizeSplits","tfc.split","tfc.scatterND","tfc.gatherND","sparseValues","tfc.fft","tfc.ifft","tfc.rfft","tfc.irfft","tfc.cast","tfc.expandDims","tfc.squeeze","tfc.reshape","tfc.pad","blockShape","paddings","tfc.spaceToBatchND","crops","tfc.batchToSpaceND","blockSize","tfc.depthToSpace","arithmetic.executeOp","basicMath.executeOp","pred","data_1","_b","frameId","enterFrame","exitFrame","nextIteration","name_1","tensorArray","addTensorArray","scalar","writeTensor","getTensorArray","readId","readIndex","gatherId","gatherIndices","gatherDtype","gather","scatterId","scatterIndices","scatterTensor","scatter","concatId","concatTensorArray","concatDtype","splitId","splitTensor","lengths","sizeId","sizeTensorArray","closeId","clearAndClose","control.executeOp","convolution.executeOp","creation.executeOp","scores","maxOutputSize","iouThreshold","scoreThreshold","nonMaxSuppressionAsync","tfc.whereAsync","tfc.setdiff1dAsync","dynamic.executeOp","evaluation.executeOp","image.executeOp","graph.executeOp","logical.executeOp","matrices.executeOp","normalization.executeOp","reduction.executeOp","sliceJoin.executeOp","spectral.executeOp","transformation.executeOp","Promise","then","weightMap","tensorArrayMap","frameName","iterationId","rootContext","generateCurrentContextIds","ExecutionContext","contexts","_currentContextIds","names","contextIdforContexts","join","lastId","newFrame","unshift","splice","shift","assign","Map","_outputs","compile","GraphExecutor","_weightMap","weightIds","startNodes","compiledOrder","nameKey","sort","SEPERATOR","compiledMap","get","visited","pop","childNode","every","set","strictInputCheck","checkInput","checkInputShapeAndType","outputNames","calculateOutputs","checkOutput","tensorsToKeep","getFrozenTensorIds","intermediateTensorConsumerCount","compiledNodes","checkTensorForDisposal","findOutputs","ids","Set","indexOf","getTensorsForCurrentContenxt","has","count","executeWithControlFlow","results","outputIds","inputIdArray","inputIds","isDisposed","inputNodes","currentContext","added","promises","processStack","all","item","currentContext_1","processChildNodes","this_1","inputTensors","shape_1","match","inputKeys","missing","extra","notInGraph","filter","compiledNodeNames","TFHUB_SEARCH_PARAM","DEFAULT_MODEL_NAME","modelUrl","loadOptions","GraphModel","version","executor","outputNodes","path","load","handler","requestInit","io","browserHTTPRequest","handlers","getLoadHandlers","onProgress","findIOHandler","artifacts","modelTopology","versions","producer","minConsumer","decodeWeights","weightData","weightSpecs","Instance","transformGraph","convertTensorMapToTensorsMap","config","execute_","inputArray","Tensor","constructTensorMap","isControlFlowModel","isDynamicShapeModel","execute","executeAsync","newMap","options","fromTFHub","endsWith","model"],"mappings":"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"}