"use strict";
/**
 * @license
 * Copyright 2017 Google Inc. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
Object.defineProperty(exports, "__esModule", { value: true });
var tf = require("../index");
var jasmine_util_1 = require("../jasmine_util");
var test_util_1 = require("../test_util");
var backend_webgl_1 = require("./backend_webgl");
jasmine_util_1.describeWithFlags('lazy packing and unpacking', test_util_1.WEBGL_ENVS, function () {
    var webglLazilyUnpackFlagSaved;
    var webglCpuForwardFlagSaved;
    beforeAll(function () {
        webglLazilyUnpackFlagSaved = tf.ENV.get('WEBGL_LAZILY_UNPACK');
        webglCpuForwardFlagSaved = tf.ENV.get('WEBGL_CPU_FORWARD');
        tf.ENV.set('WEBGL_LAZILY_UNPACK', true);
        tf.ENV.set('WEBGL_CPU_FORWARD', false);
    });
    afterAll(function () {
        tf.ENV.set('WEBGL_LAZILY_UNPACK', webglLazilyUnpackFlagSaved);
        tf.ENV.set('WEBGL_CPU_FORWARD', webglCpuForwardFlagSaved);
    });
    it('should not leak memory when lazily unpacking', function () {
        var a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);
        var b = tf.tensor2d([0, 1, -3, 2, 2, 1], [3, 2]);
        // c is packed to 1x1 RGBA texture.
        var c = tf.matMul(a, b);
        var startNumBytes = tf.memory().numBytes;
        var startNumTensors = tf.memory().numTensors;
        var startNumBytesInGPU = tf.memory().numBytesInGPU;
        var webglPackBinaryOperationsFlagSaved = tf.ENV.get('WEBGL_PACK_BINARY_OPERATIONS');
        tf.ENV.set('WEBGL_PACK_BINARY_OPERATIONS', false);
        // Add will unpack c before the operation to 2
        tf.add(c, 1);
        tf.ENV.set('WEBGL_PACK_BINARY_OPERATIONS', webglPackBinaryOperationsFlagSaved);
        expect(tf.memory().numBytes - startNumBytes).toEqual(16);
        expect(tf.memory().numTensors - startNumTensors).toEqual(1);
        // result is unpacked 2x2 R texture.
        expect(tf.memory().numBytesInGPU -
            startNumBytesInGPU)
            .toEqual(4 * tf.util.bytesPerElement(a.dtype));
    });
    it('should not leak memory when lazily packing', function () {
        var a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);
        var b = tf.tensor2d([0, 1, -3, 2, 2, 1], [3, 2]);
        var c = tf.add(a, 1);
        var startNumBytes = tf.memory().numBytes;
        var startNumTensors = tf.memory().numTensors;
        var startNumBytesInGPU = tf.memory().numBytesInGPU;
        tf.matMul(b, c);
        expect(tf.memory().numBytes - startNumBytes).toEqual(36);
        expect(tf.memory().numTensors - startNumTensors).toEqual(1);
        // result [3, 3] is packed to four RGBA pixel texture b is packed to two
        // RGBA texels texture: total 6 * 4 = 24 components.
        expect(tf.memory().numBytesInGPU -
            startNumBytesInGPU)
            .toEqual(24 * tf.util.bytesPerElement(a.dtype));
    });
    it('should work when the same input must be represented by' +
        'different textures', function () {
        var a = tf.tensor1d([1, 2]);
        var res = tf.dot(a, a);
        test_util_1.expectArraysClose(res, [5]);
    });
});
jasmine_util_1.describeWithFlags('backendWebGL', test_util_1.WEBGL_ENVS, function () {
    var prevBackend;
    beforeAll(function () {
        prevBackend = tf.getBackend();
    });
    afterEach(function () {
        tf.setBackend(prevBackend);
        tf.ENV.removeBackend('test-storage');
    });
    it('register empty string tensor', function () {
        var backend = new backend_webgl_1.MathBackendWebGL();
        tf.ENV.registerBackend('test-storage', function () { return backend; });
        tf.setBackend('test-storage');
        var t = tf.Tensor.make([3], {}, 'string');
        expect(backend.readSync(t.dataId) == null).toBe(true);
    });
    it('register empty string tensor and write', function () {
        var backend = new backend_webgl_1.MathBackendWebGL();
        tf.ENV.registerBackend('test-storage', function () { return backend; });
        tf.setBackend('test-storage');
        var t = tf.Tensor.make([3], {}, 'string');
        backend.write(t.dataId, ['c', 'a', 'b']);
        test_util_1.expectArraysEqual(backend.readSync(t.dataId), ['c', 'a', 'b']);
    });
    it('register string tensor with values', function () {
        var backend = new backend_webgl_1.MathBackendWebGL();
        tf.ENV.registerBackend('test-storage', function () { return backend; });
        tf.setBackend('test-storage');
        var t = tf.Tensor.make([3], { values: ['a', 'b', 'c'] }, 'string');
        test_util_1.expectArraysEqual(backend.readSync(t.dataId), ['a', 'b', 'c']);
    });
    it('register string tensor with values and overwrite', function () {
        var backend = new backend_webgl_1.MathBackendWebGL();
        tf.ENV.registerBackend('test-storage', function () { return backend; });
        tf.setBackend('test-storage');
        var t = tf.Tensor.make([3], { values: ['a', 'b', 'c'] }, 'string');
        backend.write(t.dataId, ['c', 'a', 'b']);
        test_util_1.expectArraysEqual(backend.readSync(t.dataId), ['c', 'a', 'b']);
    });
    it('register string tensor with values and wrong shape throws error', function () {
        var backend = new backend_webgl_1.MathBackendWebGL();
        tf.ENV.registerBackend('test-storage', function () { return backend; });
        tf.setBackend('test-storage');
        expect(function () { return tf.tensor(['a', 'b', 'c'], [4], 'string'); }).toThrowError();
    });
    it('reading', function () {
        var backend = new backend_webgl_1.MathBackendWebGL(null);
        tf.ENV.registerBackend('test-storage', function () { return backend; });
        tf.setBackend('test-storage');
        var texManager = backend.getTextureManager();
        var t = tf.Tensor.make([3], {}, 'float32');
        backend.write(t.dataId, new Float32Array([1, 2, 3]));
        expect(texManager.getNumUsedTextures()).toBe(0);
        backend.getTexture(t.dataId);
        expect(texManager.getNumUsedTextures()).toBe(1);
        test_util_1.expectArraysClose(backend.readSync(t.dataId), new Float32Array([1, 2, 3]));
        expect(texManager.getNumUsedTextures()).toBe(0);
        backend.getTexture(t.dataId);
        expect(texManager.getNumUsedTextures()).toBe(1);
        backend.disposeData(t.dataId);
        expect(texManager.getNumUsedTextures()).toBe(0);
    });
    it('read packed and then use by an unpacked op', function () {
        var backend = new backend_webgl_1.MathBackendWebGL(null);
        tf.ENV.registerBackend('test-storage', function () { return backend; });
        tf.setBackend('test-storage');
        var webglPackFlagSaved = tf.ENV.get('WEBGL_PACK');
        tf.ENV.set('WEBGL_PACK', true);
        var webglSizeUploadUniformSaved = tf.ENV.get('WEBGL_SIZE_UPLOAD_UNIFORM');
        tf.ENV.set('WEBGL_SIZE_UPLOAD_UNIFORM', 0);
        var a = tf.tensor2d([1, 2], [2, 1]);
        var b = tf.tensor2d([1], [1, 1]);
        var c = tf.matMul(a, b);
        backend.readSync(c.dataId);
        tf.ENV.set('WEBGL_PACK', false);
        var d = tf.add(c, 1);
        tf.ENV.set('WEBGL_PACK', webglPackFlagSaved);
        tf.ENV.set('WEBGL_SIZE_UPLOAD_UNIFORM', webglSizeUploadUniformSaved);
        test_util_1.expectArraysClose(d, [2, 3]);
    });
    it('delayed storage, overwriting', function () {
        var backend = new backend_webgl_1.MathBackendWebGL(null);
        tf.ENV.registerBackend('test-storage', function () { return backend; });
        tf.setBackend('test-storage');
        var texManager = backend.getTextureManager();
        var t = tf.Tensor.make([3], {}, 'float32');
        backend.write(t.dataId, new Float32Array([1, 2, 3]));
        backend.getTexture(t.dataId);
        expect(texManager.getNumUsedTextures()).toBe(1);
        // overwrite.
        backend.write(t.dataId, new Float32Array([4, 5, 6]));
        expect(texManager.getNumUsedTextures()).toBe(0);
        test_util_1.expectArraysClose(backend.readSync(t.dataId), new Float32Array([4, 5, 6]));
        backend.getTexture(t.dataId);
        expect(texManager.getNumUsedTextures()).toBe(1);
        test_util_1.expectArraysClose(backend.readSync(t.dataId), new Float32Array([4, 5, 6]));
        expect(texManager.getNumUsedTextures()).toBe(0);
    });
});
jasmine_util_1.describeWithFlags('Custom window size', test_util_1.WEBGL_ENVS, function () {
    it('Set screen area to be 1x1', function () {
        // This will set the screen size to 1x1 to make sure the page limit is
        // very small.
        spyOnProperty(window, 'screen', 'get')
            .and.returnValue({ height: 1, width: 1 });
        tf.ENV.registerBackend('custom-webgl', function () { return new backend_webgl_1.MathBackendWebGL(); });
        tf.setBackend('custom-webgl');
        // Allocate ~40KB.
        var a = tf.ones([100, 100]);
        // No gpu memory used yet because of delayed storage.
        expect(tf.memory().numBytesInGPU).toBe(0);
        // Expect console.warn() to be called.
        var numWarnCalls = 0;
        spyOn(console, 'warn').and.callFake(function () {
            numWarnCalls++;
        });
        a.square();
        expect(numWarnCalls).toBe(1);
        expect(tf.memory().numBytesInGPU)
            .toBe(100 * 100 * 4 * 2);
        // Allocate another 40KB.
        a.square();
        // Expect console.warn() to NOT be called more than once.
        expect(numWarnCalls).toBe(1);
        expect(tf.memory().numBytesInGPU)
            .toBe(100 * 100 * 4 * 3);
        tf.ENV.removeBackend('custom-webgl');
    });
});
var SIZE_UPLOAD_UNIFORM = 4;
// Run only for environments that have 32bit floating point support.
var FLOAT32_WEBGL_ENVS = Object.assign({
    'WEBGL_RENDER_FLOAT32_ENABLED': true,
    'WEBGL_SIZE_UPLOAD_UNIFORM': SIZE_UPLOAD_UNIFORM
}, test_util_1.WEBGL_ENVS);
jasmine_util_1.describeWithFlags('upload tensors as uniforms', FLOAT32_WEBGL_ENVS, function () {
    it('small tensor gets uploaded as scalar', function () {
        var m = tf.memory();
        expect(m.numBytesInGPU).toBe(0);
        var a = tf.zeros([SIZE_UPLOAD_UNIFORM - 1]);
        a.square();
        // Only the result lives on the gpu, the input is gone.
        m = tf.memory();
        expect(m.numBytesInGPU).toBe(a.size * 4);
    });
    it('large tensor gets uploaded to gpu', function () {
        var m = tf.memory();
        expect(m.numBytesInGPU).toBe(0);
        var a = tf.zeros([SIZE_UPLOAD_UNIFORM + 1]);
        a.square();
        // Both the result and the input live on the gpu.
        m = tf.memory();
        expect(m.numBytesInGPU).toBe(a.size * 4 * 2);
    });
    it('download and re-upload an output of a shader', function () {
        var vals = new Float32Array(SIZE_UPLOAD_UNIFORM + 1);
        vals.fill(2);
        var a = tf.square(vals);
        a.dataSync(); // Download to CPU.
        var res = a.square(); // Re-upload to GPU.
        var expected = new Float32Array(SIZE_UPLOAD_UNIFORM + 1);
        expected.fill(16);
        test_util_1.expectArraysClose(res, expected);
    });
});
//# sourceMappingURL=backend_webgl_test.js.map